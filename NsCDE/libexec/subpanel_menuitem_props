#!/bin/ksh

#
# This file is a part of the NsCDE - Not so Common Desktop Environment
# Author: Hegel3DReloaded
# Licence: GPLv3
#

# Function: examine_entrypart
# Purpose: detect and count missing
# entries until next valid one
function examine_entrypart
{
   direction="$1"
   ouraddr="$2"
   addrbefore=$(($ouraddr - 1))
   addrafter=$(($ouraddr + 1))

   if [ "$direction" == "up" ]; then
      addrrange={$addrbefore..1}
   else
      addrrange={$addrafter..$endaddr}
   fi

   for addr in $addrrange
   do
      echo "$entrypart" | sed -n "${addr}p" | while IFS="," read subp esign title check iconfile cmdargs
      do
         cmd="${cmdargs%% *}"
         if [ "$check" != "" ]; then
            if [ "${check%%:*}" == "CHECK" ]; then
               whence -qp "${check#*:}"
               if (($? != 0)); then
                  echo 1
               else
                  break 2
               fi
            else
               break 2
            fi
         fi
         if [ "$check" == "" ]; then
            whence -qp $cmd
            if (($? != 0)); then
               echo 1
            else
               break 2
            fi
         fi
      done
   done
}

function actions_file_sanity
{
   pexist=$(egrep "^S${subpid},(NAME|WIDTH|ENABLED)," "$FVWM_USERDIR/Subpanels.actions" 2>/dev/null | wc -l)
   if (($pexist != 3)); then
      egrep "^S${subpid}," "$NSCDE_ROOT/config/Subpanels.actions" >> "$FVWM_USERDIR/Subpanels.actions"
   fi
}

function subpanels_file_tstamp
{
   if [[ -r "$FVWM_USERDIR/Subpanels.actions" && -r "$FVWM_USERDIR/NsCDE-Subpanels.conf" ]]; then
      if [ "$FVWM_USERDIR/Subpanels.actions" -nt "$FVWM_USERDIR/NsCDE-Subpanels.conf" ]; then
         echo "File $FVWM_USERDIR/Subpanels.actions is newer than $FVWM_USERDIR/NsCDE-Subpanels.conf ... regenerating latest one." >&2
         $NSCDE_ROOT/libexec/generate_subpanels > $FVWM_USERDIR/NsCDE-Subpanels.conf
         FvwmCommand "f_ReadCfg Subpanels"
         sleep 1
         FvwmCommand "KillModule FvwmButtons NsCDE-Subpanel${subpid}"
         exit 0
      fi
   fi
}

function manage_entry
{
   if [ ! -d "$FVWM_USERDIR/tmp" ]; then
      mkdir -p "$FVWM_USERDIR/tmp"
   fi

   export TMPDIR="$FVWM_USERDIR/tmp"

   if [[ -z $NSCDE_DEBUG ]]; then
      tmpfile=$(mktemp)
      exec > "$tmpfile"
   fi

   IFS=" "

   restoffile=$(egrep -v "^S${subpid}," "$FVWM_USERDIR/Subpanels.actions")
   subpinfopart=$(egrep "^S${subpid},(NAME|WIDTH|ENABLED)," "$FVWM_USERDIR/Subpanels.actions")
   entrypart=$(egrep "^S${subpid},ENTRY," "$FVWM_USERDIR/Subpanels.actions")
   endaddr=$(echo "$entrypart" | wc -l)

   if [ "$ACTION" == "up" ]; then
      if (($entryid == 1)); then
         if [[ -n $DISPLAY ]]; then
            FvwmCommand "FvwmForm ErrMsgForm2 TITLE=\"Subpanel Properties\" \
                        TEXT1=\"Item '$TITLE'\" \
                        TEXT2=\"is on the top of the Subpanel $subpid.\""
         fi
         # Important to exit here, else Subpanels.actions will be clobbered
         exit 0
      else
         empties=$(examine_entrypart up $entryid | wc -l)

         entrybefore=$(($entryid - 2 - $empties))
         entryafter=$(($entryid - 1 - $empties))
         restentries=$(($entryid + 1))
         entryidminusone=$(($entryid - 1))

         firstpart=$(echo "$entrypart" | sed -n "1,${entrybefore}p")
         secondpart=$(echo "$entrypart" | sed -n "${entryid}p")
         thirdpart=$(echo "$entrypart" | sed -n "${entryafter},${entryidminusone}p")
         restpart=$(echo "$entrypart" | sed -n "${restentries},\$p")

         echo "$restoffile"
         echo ""
         echo "$subpinfopart"

         echo "$firstpart"
         echo "$secondpart"
         echo "$thirdpart"

         if [ "x$restpart" != "x" ]; then
            echo "$restpart"
         fi
      fi
   fi

   if [ "$ACTION" == "down" ]; then
      if (($entryid == $endaddr)); then
         if [[ -n $DISPLAY ]]; then
            FvwmCommand "FvwmForm ErrMsgForm2 TITLE=\"Subpanel Properties\" \
                        TEXT1=\"Item '$TITLE'\" \
                        TEXT2=\"is on the bottom of the Subpanel $subpid.\""
         fi
         # Important to exit here, else Subpanels.actions will be clobbered
         exit 0
      else
         empties=$(examine_entrypart down $entryid | wc -l)

         entrybefore=$(($entryid - 1))
         entryafter=$(($entryid + 1 + $empties))
         entryidplusone=$(($entryid + 1))
         entryidplusempties=$(($entryid + $empties))
         restpart=$(($entryafter + 1))

         firstpart=$(echo "$entrypart" | sed -n "1,${entrybefore}p")
         secondpart=$(echo "$entrypart" | sed -n "${entryafter}p")
         thirdpart=$(echo "$entrypart" | sed -n "${entryid}p")

         restdiff=$(echo "$entrypart" | sed -n "${entryidplusone},${entryidplusempties}p")

         restpart=$(echo "$entrypart" | sed -n "${restpart},\$p")

         echo "$restoffile"
         echo ""
         echo "$subpinfopart"

         if (($entryid != 1)); then
            echo "$firstpart"
         fi

         if [ "x$secondpart" != "x" ]; then
            echo "$secondpart"
         fi

         if (($entryidplusone <= $entryidplusempties)); then
            echo "$restdiff"
         fi

         echo "$thirdpart"

         if [ "x$restpart" != "x" ]; then
            echo "$restpart"
         fi
      fi
   fi

   if [ "$ACTION" == "begin" ]; then
      if (($entryid == 1)); then
         if [[ -n $DISPLAY ]]; then
            FvwmCommand "FvwmForm ErrMsgForm2 TITLE=\"Subpanel Properties\" \
                        TEXT1=\"Item '$TITLE'\" \
                        TEXT2=\"is already on the top of the Subpanel $subpid.\""
         fi
         # Important to exit here, else Subpanels.actions will be clobbered
         exit 0
      else
         entrybefore=$(($entryid - 1))
         entryafter=$(($entryid + 1))

         firstpart=$(echo "$entrypart" | sed -n "${entryid}p")
         secondpart=$(echo "$entrypart" | sed -n "1,${entrybefore}p")
         restpart=$(echo "$entrypart" | sed -n "${entryafter},\$p")

         echo "$restoffile"
         echo ""
         echo "$subpinfopart"
         echo "$firstpart"
         echo "$secondpart"
         echo "$restpart"
      fi
   fi

   if [ "$ACTION" == "end" ]; then
      if (($entryid == $endaddr)); then
         if [[ -n $DISPLAY ]]; then
            FvwmCommand "FvwmForm ErrMsgForm2 TITLE=\"Subpanel Properties\" \
                        TEXT1=\"Item '$TITLE'\" \
                        TEXT2=\"is already on the bottom of the Subpanel $subpid.\""
         fi
         # Important to exit here, else Subpanels.actions will be clobbered
         exit 0
      else
         entrybefore=$(($entryid - 1))
         entryafter=$(($entryid + 1))

         firstpart=$(echo "$entrypart" | sed -n "${entryid}p")
         secondpart=$(echo "$entrypart" | sed -n "1,${entrybefore}p")
         restpart=$(echo "$entrypart" | sed -n "${entryafter},\$p")

         echo "$restoffile"
         echo ""
         echo "$subpinfopart"
         echo "$secondpart"
         echo "$restpart"
         echo "$firstpart"
      fi
   fi

   if [ "$ACTION" == "delete" ]; then
      entrybefore=$(($entryid - 1))
      entryafter=$(($entryid + 1))

      firstpart=$(echo "$entrypart" | sed -n "1,${entrybefore}p")
      restpart=$(echo "$entrypart" | sed -n "${entryafter},\$p")

      echo "$restoffile"
      echo ""
      echo "$subpinfopart"

      if (($entryid > 1)); then
         echo "$firstpart"
      fi

      if (($entryid != $endaddr)); then
         echo "$restpart"
      fi
   fi

   if [[ -z $NSCDE_DEBUG ]]; then
      egrep -q "^S${subpid},NAME,.*" "$tmpfile"
      if (($? == 0)); then
         cp -f "$FVWM_USERDIR/Subpanels.actions" "$FVWM_USERDIR/tmp/Subpanels.actions.old"
         cat "$tmpfile" > "$FVWM_USERDIR/Subpanels.actions"
         $NSCDE_ROOT/libexec/generate_subpanels > $FVWM_USERDIR/NsCDE-Subpanels.conf
         FvwmCommand "f_ReadCfg Subpanels"
         FvwmCommand "KillModule FvwmButtons NsCDE-Subpanel${subpid}"
         rm "$tmpfile"
      else
         if [[ -n $DISPLAY ]]; then
            FvwmCommand "FvwmForm ErrMsgForm2 TITLE=\"Subpanel Properties\" \
                        TEXT1=\"Action for item '$TITLE'\" \
                        TEXT2=\"not performed on Subpanel $subpid. Errors in $tmpfile found.\""
         else
            echo "Action for item $TITLE not performed on Subpanel $subpid. Errors in $tmpfile found." >&2
         fi
         exit 2
      fi
   fi

   if [ -f "$tmpfile" ]; then
      echo "Removing stale tmp file $tmpfile" >&2
      rm -f "$tmpfile"
   fi
}

function copy_to_main_panel
{
         entry_to_copy=$(egrep -h "^S${subpid},ENTRY,*" "$FVWM_USERDIR/Subpanels.actions" | sed -n "${entryid}p")
         if [ "x$entry_to_copy" == "x" ]; then
            entry_to_copy=$(egrep -h "^S${subpid},ENTRY,*" "$NSCDE_ROOT/config/Subpanels.actions" | sed -n "${entryid}p")
         fi
         if [ "x$entry_to_copy" == "x" ]; then
            echo "ERROR: subpanel_menuitem_props (copy_to_main_panel): internal error. No entry in system Subpanels.actons file."
            exit 10
         fi
         echo "$entry_to_copy" | tail -1 | while IFS="," read smark emark title type icon cmd
         do
            for content in "$title" "$icon" "$cmd"
            do
               if [ "x$content" == "x" ]; then
                  echo "ERROR: subpanel_menuitem_props (copy_to_main_panel): empty title, icon or command definition."
                  exit 10
               fi
            done

            icon_ext="${icon##*.}"
            find_appropriate_icon "$icon"

            if (($ENOICON == 1)); then
               echo "Trying heuristics with icon extension formats while searching for an icon ..."
               export ENOICON=0
               case "$icon_ext" in
               'png')
                  icon_new_ext=$(echo "$icon" | sed 's/\.png$/.xpm/g')
                  find_appropriate_icon "$icon_new_ext"
                  if (($ENOICON == 1)); then
                     icon_new_ext=$(echo "$icon" | sed 's/\.png$/.svg/g')
                     find_appropriate_icon "$icon_new_ext"
                  fi
               ;;
               'xpm'|'pm')
                  icon_new_ext=$(echo "$icon" | sed 's/\.xpm$/.png/g')
                  find_appropriate_icon "$icon_new_ext"
                  if (($ENOICON == 1)); then
                     icon_new_ext=$(echo "$icon" | sed 's/\.xpm$/.svg/g')
                     find_appropriate_icon "$icon_new_ext"
                  fi
               ;;
               'svg')
                  icon_new_ext=$(echo "$icon" | sed 's/\.svg$/.png/g')
                  find_appropriate_icon "$icon_new_ext"
                  if (($ENOICON == 1)); then
                     icon_new_ext=$(echo "$icon" | sed 's/\.svg$/.xpm/g')
                     find_appropriate_icon "$icon_new_ext"
                  fi
               ;;
               esac
            fi

            case "x$type" in
            'x')
               fp_action_type="${cmd%% *}"
            ;;
            'xFVWM-F'|'xFVWM-M')
               fp_action_type="FVWM"
            ;;
            'xNOCHK')
               fp_action_type="true"
            ;;
            xCHECK:*)
               fp_action_type="${type##*:}"
            ;;
            esac

            fp_m1="Btn${subpid},$icon,M1,$fp_action_type,$cmd"
            fp_m3="Btn${subpid},,M3,FVWM,f_FrontPanelPropsMenu ${subpid} $title"
            if [ -r "$FVWM_USERDIR/FrontPanel.actions" ]; then
               $NSCDE_ROOT/bin/ised -c "/^Btn${subpid},\(.*\)\?,M\(1\|3\)/d" -f $FVWM_USERDIR/FrontPanel.actions
            fi
            echo "$fp_m1" | head -1 >> "$FVWM_USERDIR/FrontPanel.actions"
            echo "$fp_m3" | head -1 >> "$FVWM_USERDIR/FrontPanel.actions"
            FvwmCommand "SendToModule FrontPanel ChangeButton Btn${subpid} Icon \"$icon\""
         done
}

function find_appropriate_icon
{
   # Defaults
   ENOICON=0

   icon_no_path=${1##*/}
   icon_no_path_no_fvwm_prefix=${icon_no_path//32x32-}

   # First, try similar path with 48x48 instead of 32x32 or similar:
   try_icon=$(echo "$1" | sed 's/\/[1-9]\+x[1-9]\+/\/48x48/g')
   if [ -r "$try_icon" ]; then
      icon="$try_icon"
      return
   fi

   # See if the user has a local icon repository.
   if [ -d "$HOME/.local/share/icons" ]; then
      try_try_icon=$(find "$HOME/.local/share/icons" -type f -name "${icon_no_path}" | head -1)
      if [ "$(echo "$try_try_icon" | egrep '48x48')" != "" ]; then
         icon="$try_try_icon"
         return
      fi
      m_to_l=$(echo "$1" | sed 's/\.m\.\(xpm\|pm\)/\.l\.\1/g')
      try_try_icon=$(find "$HOME/.local/share/icons" -type f -name "${m_to_l##*/}" | head -1)
      if [ -r "$try_try_icon" ]; then
         icon="$try_try_icon"
         return
      fi
   fi

   try_icon_p=$(echo "$1" | sed 's/\.m\.\(xpm\|pm\)/\.l\.\1/g')
   try_icon="${try_icon_p##*/}"
   if [ -r "$NSCDE_ROOT/share/icons/CDE/$try_icon" ]; then
      icon="$NSCDE_ROOT/share/icons/CDE/$try_icon"
      return
   fi
   if [ -r "$NSCDE_ROOT/share/icons/NsCDE/$try_icon" ]; then
      icon="$NSCDE_ROOT/share/icons/NsCDE/$try_icon"
      return
   fi

   try_icon=$(find "/usr/local/share/icons" -type f -name "${icon_no_path_no_fvwm_prefix}" | grep '48x48' | head -1)
   if [ -r "$try_icon" ]; then
      icon="$try_icon"
      return
   fi

   try_icon=$(find "/usr/share/icons" -type f -name "${icon_no_path_no_fvwm_prefix}" | grep '48x48' | head -1)
   if [ -r "$try_icon" ]; then
      icon="$try_icon"
      return
   fi

   # Generate 48x48 icons if needed.
   $NSCDE_ROOT/libexec/nscde-fvwm-menu-desktop --plain-list --enable-mini-icons --size 48 > /dev/null 2>&1

   if [ -r "$FVWM_USERDIR/icons/NsCDE/$try_icon" ]; then
      icon="$FVWM_USERDIR/icons/NsCDE/$try_icon"
      return
   fi
   if [ -r "$FVWM_USERDIR/icons/CDE/$try_icon" ]; then
      icon="$FVWM_USERDIR/icons/CDE/$try_icon"
      return
   fi
   if [ -r "$FVWM_USERDIR/icons/$try_icon" ]; then
      icon="$FVWM_USERDIR/icons/$try_icon"
      return
   fi

   icon32_to_icon48_name=$(echo "$try_icon" | sed 's/[1-9]\+x[1-9]\+-/48x48-/g')
   if [ -r "$FVWM_USERDIR/icons/$icon32_to_icon48_name" ]; then
      icon="$FVWM_USERDIR/icons/$icon32_to_icon48_name"
      return
   fi

   # If anything else fails ...
   try_icon=$($NSCDE_ROOT/libexec/nscde-fvwm-menu-desktop --plain-list --enable-mini-icons --size 48 | egrep "ITEM:%.*%.*%${cmd%% *}" | head -1 | cut -d"%" -f3)
   if [ "x$try_icon" != "x" ]; then
      icon="$try_icon"
      return
   fi

   # If we are here, nothing has been found. Indicate this.
   export ENOICON=1
}

function delete_confirm
{
   if [[ -n $DISPLAY ]]; then
      FvwmCommand "f_RunQuickScriptDialog ActionForm \"Delete item \\\"$TITLE\\\" from the subpanel ${subpid}?\" \
                   Yes No \"Confirm Entry Deletion\" \"f_DeleteFromSubpanel $subpid $entryid\" Nop"
   fi
}

function exec_entry
{
   FvwmCommand "SendToModule NsCDE-Subpanel${subpid} PressButton Btn-${subpid}-${entryid}"
}

while getopts p:s:a:t:edc Option
do
   case $Option in
      p)
         subpid="$OPTARG"
      ;;
      s)
         entryid="$OPTARG"
      ;;
      a)
         ACTION="$OPTARG"
         subpanels_file_tstamp
         actions_file_sanity
         manage_entry
      ;;
      t)
         TITLE="$OPTARG"
      ;;
      e)
         exec_entry
      ;;
      d)
         delete_confirm
      ;;
      c)
         copy_to_main_panel
      ;;
   esac
done

