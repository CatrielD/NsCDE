#
# This file is a part of the NsCDE - Not so Common Desktop Environment
# Author: Hegel3DReloaded
# Licence: GPLv3
#

#################################
# Core Window Operation Functions
#################################

# Function: f_GotoDeskAndPage
# Calls f_GotoDeskAndLastPage or f_GotoDeskAndDefaultPage
# depending if infostore.desklastpage is 1 or not.
# Parameters:
# $[*] - desk numbers for child dependent functions
DestroyFunc f_GotoDeskAndPage
AddToFunc f_GotoDeskAndPage
+ I Test (EnvMatch infostore.desklastpage 1) f_GotoDeskAndLastPage $[*]
+ I Test (!EnvMatch infostore.desklastpage 1) f_GotoDeskAndDefaultPage $[*]

# Function: f_GotoDeskAndDefaultPage
# Merely a wrapper for calling bare GotoDesk FVWM
# builtin when infostore.desklastpage is not 1
# Called from: f_GotoDeskAndPage
# Parameters:
# $0 - always 0
# $1 - desk number from 0-7
DestroyFunc f_GotoDeskAndDefaultPage
AddToFunc f_GotoDeskAndDefaultPage
+ I GotoDesk $0 $1

# Function: f_GotoDeskAndLastPage
# Changes active Workspace and page to last visited
# on workspace if possible. If not, then changes only
# workspace. Used in WSM and Keybindings as main
# mechanism for workspace navigation.
# Called from: f_GotoDeskAndPage
# Parameters:
# $0 - always 0
# $1 - desk number from 0-7
# $[infostore.last_page_dsk_$1] - page numbers from that desk
# in the dynamic infostore variable
DestroyFunc f_GotoDeskAndLastPage
AddToFunc f_GotoDeskAndLastPage
+ I Test (EnvMatch infostore.lpactive_$1 1) GotoDeskAndPage $0$1 $[infostore.last_page_dsk_$1]
+ I Test (!EnvMatch infostore.lpactive_$1 1) GotoDeskAndPage $0$1 0 0

# Function: f_GotoDesk
# Wrapper for default NsCDE keybinding Meta+Tab and Meta+Ctrl+LRLR
# Calls GotoDesk and optionally changes page to last active one on desk
# if infostore.desklastpage is 1
# Parameters: none
DestroyFunc f_GotoDesk
AddToFunc f_GotoDesk
+ I GotoDesk $0 $1 $2 $3
+ I Test (EnvMatch infostore.desklastpage 1, EnvMatch infostore.lpactive_$[desk.n] 1) GotoPage $[infostore.last_page_dsk_$[desk.n]]

# Function: f_MoveToDeskAndPage
# Moves window to specific desk and page in one call
# similar to GoToDeskAndPage builtin
DestroyFunc f_MoveToDeskAndPage
AddToFunc f_MoveToDeskAndPage
+ I MoveToDesk $0 $1
+ I MoveToPage $2 $3

# Mouse Bindings Functions
DestroyFunc f_RaiseMoveX
AddToFunc f_RaiseMoveX
+ I Raise
+ M $0
+ D $1

DestroyFunc f_RaiseMove
AddToFunc f_RaiseMove
+ I Raise
+ M $0

DestroyFunc f_MoveRaiseLower
AddToFunc f_MoveRaiseLower
+ M Move
+ C RaiseLower
+ D Raise
+ D Move
+ H Raise
+ H Move

# RaiswLower + custom action as $0
DestroyFunc f_RaiseLowerX
AddToFunc f_RaiseLowerX
+ M $0
+ D RaiseLower
+ H Nop

DestroyFunc MoveToCurrent
AddToFunc MoveToCurrent
+ I ThisWindow MoveToPage
+ I ThisWindow MoveToDesk

DestroyFunc f_ButtonMaximize
AddToFunc f_ButtonMaximize
+ M Maximize 0 100
+ M $0
+ M $1
+ C Piperead "echo Maximize 100 $(($[vp.height] - 78))p"
+ C $0
+ C $1
+ D Maximize 100 100
+ D $0
+ D $1

DestroyFunc f_RegenerateWindow
AddToFunc f_RegenerateWindow
+ I InfoStoreAdd winres $[w.resource]
+ I Test (EnvMatch infostore.winres FrontPanel) f_FullyClearFrontPanelPressed
+ I RefreshWindow

# Used for toggling Window Title on or off for example.
DestroyFunc f_ToggleWindowStyle
AddToFunc f_ToggleWindowStyle
+ I ThisWindow (State 1) WindowStyle $[0-]
+ I TestRc (Match) State 1 False
+ I TestRc (Match) Break 1
+ I WindowStyle !$[0-]
+ I State 1 True

# Used to center window and warp pointer to exact coordinates, usually 50 50
DestroyFunc f_AnimatedCenterWarp
AddToFunc f_AnimatedCenterWarp
+ I Next ($0, CirculateHit) AnimatedMove 50-50w 50-50w Warp
+ I Next ($0, CirculateHit) WarpToWindow $1 $2

DestroyFunc f_CenterWindow
AddToFunc f_CenterWindow
+ I ThisWindow Move 50-50w 50-50w

DestroyFunc f_DeiconifyOnPage
AddToFunc f_DeiconifyOnPage
+ I Iconify off
+ I MoveToPage $0 $1

DestroyFunc f_MoveToPage
AddToFunc f_MoveToPage
+ I f_SetWSMConf
+ I PipeRead '$NSCDE_ROOT/bin/mkpagemenu $[infostore.pagematrixX] $[infostore.pagematrixY] n MoveToPage "Move To Page:"'

DestroyFunc f_GoToPage
AddToFunc f_GoToPage
+ I f_SetWSMConf
+ I PipeRead '$NSCDE_ROOT/bin/mkpagemenu $[infostore.pagematrixX] $[infostore.pagematrixY] y GoToPage'

DestroyFunc f_MoveToWorkspace
AddToFunc f_MoveToWorkspace
+ I f_SetWSMConf
+ I PipeRead 'wsp=0; while [ ${wsp} -lt $[infostore.desknum] ]; do wsp=$((wsp + 1)); \
              wspname=$(egrep "^WSP:${wsp}:" $[infostore.wsmconf] | cut -d: -f3); \
              if [ "x${wspname}" = "x" ]; then wspname="$wsp"; fi; \
              echo "+ \\\"&${wsp} Move to Workspace:		${wspname}\\\" MoveToDesk 0 $(($wsp - 1))"; done'

DestroyFunc f_SaveGeometry
AddToFunc f_SaveGeometry
+ I ThisWindow Exec exec $[NSCDE_ROOT]/bin/confset.py \
  -t ini -c $[FVWM_USERDIR]/GeoDB.ini -s $[vp.width]x$[vp.height] \
  -k $[w.resource],$[w.class] -v "$[cw.width]p $[cw.height]p $[w.x]p $[w.y]p"

DestroyFunc f_GetWinGeometry
AddToFunc f_GetWinGeometry
+ I PipeRead "echo $0 $1 $($[NSCDE_ROOT]/bin/confget.py \
  -c $[FVWM_USERDIR]/GeoDB.ini -s $[vp.width]x$[vp.height] -k $[w.resource],$[w.class] $[2-])"

DestroyFunc f_RepositionWindow
AddToFunc f_RepositionWindow
+ I Current (!FixedSize,!FixedPosition) PipeRead "echo ResizeMove $($[NSCDE_ROOT]/bin/confget.py \
  -c $[FVWM_USERDIR]/GeoDB.ini -s $[vp.width]x$[vp.height] -k $[w.resource],$[w.class])"
+ I Current (FixedSize) PipeRead "echo Move $($[NSCDE_ROOT]/bin/confget.py \
  -c $[FVWM_USERDIR]/GeoDB.ini -s $[vp.width]x$[vp.height] -k $[w.resource],$[w.class] | cut -d' ' -f 3,4)"
+ I Current (FixedPosition) PipeRead "echo Resize $($[NSCDE_ROOT]/bin/confget.py \
  -c $[FVWM_USERDIR]/GeoDB.ini -s $[vp.width]x$[vp.height] -k $[w.resource],$[w.class] | cut -d' ' -f 1,2)"

# Keep part of the keybindings which is common to menus in
# sync with menu declarations of them.
DestroyFunc f_KeyMenu
AddToFunc f_KeyMenu
+ I Piperead "$[NSCDE_ROOT]/libexec/keymenu -a"

# Execute what is in $1 - $X only a second time when
# function is called. Used to make double key bindings
# that will prevent accidental call while typing fast.
DestroyFunc f_DoubleBindKey
AddToFunc f_DoubleBindKey
+ I Test (EnvMatch infostore.dbk_$0 1) $[1-]
+ I Test (!EnvMatch infostore.dbk_$0 1) InfoStoreAdd dbk_$0 1
+ I Schedule 2000 InfoStoreRemove dbk_$0

# Middle mouse on titlebar
DestroyFunc f_ScreenShot
AddToFunc f_ScreenShot
+ I Test (x import) Current Exec exec import $0 -window $[w.id] "$[HOME]/ScreenShot_$[w.class].$[w.id].$(date +%Y%m%d.%H%M%S).png"
+ I TestRc (NoMatch) Test (x xwd) Current Exec exec xwd $0 -out "$[HOME]/ScreenShot_$[w.class].$[w.id].$(date +%Y%m%d.%H%M%S).xwd"
+ I TestRc (NoMatch) None ("Screenshot Function Error") FvwmForm ErrMsgForm \
 TITLE="Screenshot Function Error" \
 TEXT="Error: Func:f_ScreenShot: No import(1) or xwd(1) for making a screenshot found in PATH."

# Middle mouse on titlebar
DestroyFunc f_XwinInfo
AddToFunc f_XwinInfo
+ I Test (x xwininfo) Current Exec exec $[infostore.terminal] -e \
    "ksh -c 'echo -ne \"\033]0;X Window Info\007\"; xwininfo -all -id $[w.id] | less'"
+ I TestRc (NoMatch) None ("XwinInfo Function Error") FvwmForm ErrMsgForm \
 TITLE="XwinInfo Function Error" \
 TEXT="Error: Func:f_XwinInfo: No xwininfo(1) tool found in PATH."

# Middle mouse on titlebar
DestroyFunc f_Xprop
AddToFunc f_Xprop
+ I Test (x xprop) Current Exec exec $[infostore.terminal] -e \
    "ksh -c 'echo -ne \"\033]0;X Window Properties\007\"; xprop -id $[w.id] | less'"
+ I TestRc (NoMatch) None ("X Prop Function Error") FvwmForm ErrMsgForm \
 TITLE="X Prop Function Error" \
 TEXT="Error: Func:f_Xprop: No xprop(1) tool found in PATH."

# Root Window Screenshot
DestroyFunc f_RootScreenShot
AddToFunc f_RootScreenShot
+ I Test (x import) Schedule $0 Exec exec import -window root "$[HOME]/RootWinShot.$(date +%Y%m%d.%H%M%S).png"
+ I TestRc (NoMatch) Test (x xwd) Schedule $0 Exec exec xwd -root -out "$[HOME]/RootWinShot.$(date +%Y%m%d.%H%M%S).xwd"
+ I TestRc (NoMatch) None ("Root Screenshot Function Error") FvwmForm ErrMsgForm \
 TITLE="Root Screenshot Function Error" \
 TEXT="Error: Func:f_RootScreenShot: No import(1) or xwd(1) for making a root window screenshot found in PATH."

# Slight modification of the builting WindowListFunc
# Last two lines are signalization for Break in f_WinLists
DestroyFunc f_WindowList
AddToFunc f_WindowList
+ I Iconify off
+ I FlipFocus
+ I Raise
+ I WarpToWindow 10p 10p
+ I Test (EnvMatch infostore.wlisttype G) InfoStoreAdd wlistsig G
+ I Test (EnvMatch infostore.wlisttype L) InfoStoreAdd wlistsig L
+ I Test (EnvMatch infostore.desklastpage 1) InfoStoreAdd last_page_dsk_$[desk.n] "$[page.nx] $[page.ny]"

# Local and Global Window List toggle call
# Called with Alt+Escape keybinding.
# 1. It Schedules turn back on the start state on 1.25 seconds.
# 2. Puts WindowList type to (L)ocal if it is not set (initial)
# 3a. If WindowList type is (L)ocal, popup local WindowList with refefined function
# 3b. Put (G)lobal as WindowList type
# 3c. Breaks from function if WindowList signature is (L)ocal
# 4. If WindowList type is (G)lobal, popup global WindowList
DestroyFunc f_WinLists
AddToFunc f_WinLists
+ I Schedule 1250 InfoStoreAdd wlisttype L
+ I Schedule 1250 InfoStoreAdd wlistsig G
+ I Test (!EnvMatch infostore.wlisttype L) \
    Test (!EnvMatch infostore.wlisttype G) InfoStoreAdd wlisttype L
+ I Test (EnvMatch infostore.wlisttype L) \
    WindowList Root c c NoGeometry TitleForAllDesks NoCurrentDeskTitle \
    NoNumInDeskTitle CurrentDesk Function f_WindowList
+ I Test (EnvMatch infostore.wlisttype L) InfoStoreAdd wlisttype G
+ I Test (EnvMatch infostore.wlistsig L) Break
+ I Test (EnvMatch infostore.wlisttype G) WindowList Root c c NoGeometry \
    TitleForAllDesks NoCurrentDeskTitle NoNumInDeskTitle Function f_WindowList

# Function: f_MouseWinList
# Adds ability to remember last page when positoned from
# WindowList called from mouse click. Doesn't take any parameters.
DestroyFunc f_MouseWinList
AddToFunc f_MouseWinList
+ I Iconify off
+ I FlipFocus
+ I Raise
+ I WarpToWindow 10p 10p
+ I Test (EnvMatch infostore.desklastpage 1) InfoStoreAdd last_page_dsk_$[desk.n] "$[page.nx] $[page.ny]"

# Function: f_CycleFocusedOnCurrentPage
# Cycles trough windows and icons on the active page
# Parameters: none
# Called with Alt+Escape by default
DestroyFunc f_CycleFocusedOnCurrentPage
AddToFunc f_CycleFocusedOnCurrentPage
+ I Next (CurrentPage, AcceptsFocus, !Focused, !FrontPanel, !FvwmPager) Focus

# Function: f_SafeFvwmCmd
# Purpose: run fvwm command only if it has some arguments
# used in f_SysAddWindowEvent while calling f_GetWinGeometry
# Parameters: $0 - Fvwm command, $[1-], arguments
DestroyFunc f_SafeFvwmCmd
AddToFunc f_SafeFvwmCmd
+ I InfoStoreAdd fvwmcmdargs "A$[1-]Z"
+ I Test (!EnvMatch infostore.fvwmcmdargs AZ) $0 $[1-]
+ I InfoStoreRemove infostore.fvwmcmdargs

#######################
# Front Panel functions
#######################
DestroyFunc f_RestartFrontPanel
AddToFunc f_RestartFrontPanel
+ I KillModule FvwmButtons FrontPanel
+ I f_Readcfg FrontPanel
+ I ModuleSynchronous Timeout 5 FvwmButtons FrontPanel
+ I f_SendToPGM
+ I Schedule 30 f_FrontPanelSetCustom
+ I Schedule 300 f_FrontPanelSetCustom

DestroyFunc f_RestoreFrontPanel
AddToFunc f_RestoreFrontPanel
+ I None (FvwmButtons,FrontPanel,CirculateHit) InfoStoreAdd _initfp 1
+ I Test (EnvMatch infostore._initfp 1) ModuleSynchronous Timeout 5 FvwmButtons FrontPanel
+ I Test (EnvMatch infostore._initfp 1) Schedule 30 f_FrontPanelSetCustom
+ I Test (EnvMatch infostore._initfp 1) Schedule 300 f_FrontPanelSetCustom
+ I Test (EnvMatch infostore._initfp 1) InfoStoreRemove _initfp
+ I All (FvwmButtons,FrontPanel,CirculateHit,Iconic) Iconify off
+ I All (FvwmButtons,FrontPanel,CirculateHit,!Sticky) Stick
+ I All (FvwmButtons,FrontPanel,CirculateHit) $0 $1
+ I All (FvwmButtons,FrontPanel,CirculateHit) RaiseLower
+ I All (FvwmButtons,FrontPanel,CirculateHit) Resize 998p 76p
+ I All (FvwmButtons,FrontPanel,CirculateHit) AnimatedMove 50-50w -0p
+ I Test (EnvMatch infostore.fp_needs_ptr 1) All (FvwmButtons,FrontPanel,CirculateHit,!HasPointer,!Shaded) WarpToWindow 50 50
+ I Test (EnvMatch infostore.fp_needs_ptr 1) InfoStoreAdd fp_needs_ptr 0
+ I All (FvwmButtons,FrontPanel,CirculateHit,!HasPointer) InfoStoreAdd fp_needs_ptr 1

DestroyFunc f_KeyFromFpToSubanel
AddToFunc f_KeyFromFpToSubanel
+ I Test (!EnvMatch infostore.$0-Enabled 1) Break
+ I None ($0) SendToModule FrontPanel PressButton $0
+ I None ($0) Wait $0
+ I Schedule 250 All ($0) WarpToWindow 50 50
+ I Schedule 2000 Break

DestroyFunc f_KeyFromSubpanelToFP
AddToFunc f_KeyFromSubpanelToFP
+ I Test (!EnvMatch infostore.$0-Enabled 1) Break
+ I All ($0) SendToModule FrontPanel PressButton $0
+ I All (FrontPanel, CirculateHit, !HasPointer) WarpToWindow 50 50

# We must call nscde-fvwm-menu-desktop here to regenerate local icon cache just in case
DestroyFunc f_RefreshSubpanel
AddToFunc f_RefreshSubpanel
+ I Exec exec $NSCDE_ROOT/libexec/nscde-fvwm-menu-desktop --enable-mini-icons -s 32 --include-items none --plain-list > /dev/null 2>&1
+ I Exec exec $[NSCDE_ROOT]/libexec/generate_subpanels > $[FVWM_USERDIR]/NsCDE-Subpanels.conf
+ I f_ReadCfg Subpanels
+ I KillModule FvwmButtons $0
+ I Schedule 100 SendToModule FrontPanel PressButton $0
+ I Schedule 900 SendToModule FrontPanel PressButton $0
+ I Exec exec /opt/NsCDE/bin/xdowrapper

DestroyFunc f_EnableSubpanel
AddToFunc f_EnableSubpanel
+ I Exec exec cp -f $[NSCDE_ROOT]/config/$0.conf $FVWM_USERDIR/$0.conf
+ I Schedule 5000 f_RestartFrontPanel

DestroyFunc f_FrontPanelAction
AddToFunc f_FrontPanelAction
+ I Piperead "$[NSCDE_ROOT]/libexec/fpexec $0 $1"
+ I Test (EnvMatch infostore.fplastpressed Btn2) SendToModule MonthDayApplet SendString 2 2 unselect
+ I Test (EnvMatch infostore.fplastpressed Btn5) SendToModule CheckMailApplet SendString 1 3 unselect
+ I Test (EnvMatch infostore.fplastpressed FpLite) SendToModule FpLite SendString 1 2 unselect
+ I Test (EnvMatch infostore.fplastpressed FpWSM) SendToModule WSM SendString 30 2 unselect
+ I Test (EnvMatch infostore.fplastpressed FpPGM) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21
+ I Test (EnvMatch infostore.fplastpressed FpLock) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21
+ I Test (EnvMatch infostore.fplastpressed FpExit) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21
+ I Test (EnvMatch infostore.fplastpressed Btn*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21
+ I Test (EnvMatch infostore.fplastpressed NsCDE-Subpanel*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 1
+ I Schedule 100 SendToModule FrontPanel ChangeButton $0 Colorset $2
+ I InfoStoreAdd fplastpressed $0

DestroyFunc f_FrontPanelMenuAction
AddToFunc f_FrontPanelMenuAction
+ I Piperead "$[NSCDE_ROOT]/libexec/fpexec $0 $1"

DestroyFunc f_FrontPanelPropsMenu
AddToFunc f_FrontPanelPropsMenu
+ I DestroyMenu m_FrontPanelPropsMenu
+ I AddToMenu m_FrontPanelPropsMenu " $[1-] " Title
+ I AddToMenu m_FrontPanelPropsMenu "$[1-]" SendToModule FrontPanel PressButton Btn$0
+ I AddToMenu m_FrontPanelPropsMenu "" Nop
+ I Test (EnvMatch infostore.NsCDE-Subpanel$0-Enabled 0) \
    AddToMenu m_FrontPanelPropsMenu "Add Subpanel" \
    f_FrontPanelManageSubpanels $0 -a
+ I Test (EnvMatch infostore.NsCDE-Subpanel$0-Enabled 1) \
    AddToMenu m_FrontPanelPropsMenu "Delete Subpanel" \
    f_FrontPanelManageSubpanels $0 -d
+ I AddToMenu m_FrontPanelPropsMenu "" Nop
+ I AddToMenu m_FrontPanelPropsMenu "Help" f_DisplayURL "Front Panel Help" $[NSCDE_ROOT]/share/doc/html/NsCDE-applets-docks-panels.html
+ I ChangeMenuStyle MiddleMenu3 m_FrontPanelPropsMenu
+ I Popup m_FrontPanelPropsMenu mouse -0m -0m

DestroyFunc f_FrontPanelManageSubpanels
AddToFunc f_FrontPanelManageSubpanels
+ I Exec exec $[NSCDE_ROOT]/libexec/fp_manage_subpanel -p $0 $1
+ I Exec exec $[NSCDE_ROOT]/libexec/generate_subpanels > $[FVWM_USERDIR]/NsCDE-Subpanels.conf
+ I Schedule 200 f_ReadCfg Subpanels
+ I Schedule 400 f_RestartFrontPanel

DestroyFunc f_SubpanelPropsMenu
AddToFunc f_SubpanelPropsMenu
+ I DestroyMenu m_SubpanelPropsMenu
+ I AddToMenu m_SubpanelPropsMenu " $2 " Title
+ I AddToMenu m_SubpanelPropsMenu "$2" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -e
+ I AddToMenu m_SubpanelPropsMenu "" Nop
+ I AddToMenu m_SubpanelPropsMenu "Move Up" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -a up
+ I AddToMenu m_SubpanelPropsMenu "Move Down" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -a down
+ I AddToMenu m_SubpanelPropsMenu "Move to Beginning" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -a begin
+ I AddToMenu m_SubpanelPropsMenu "Move to End" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -a end
+ I AddToMenu m_SubpanelPropsMenu "Delete" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -d
+ I AddToMenu m_SubpanelPropsMenu "" Nop
+ I AddToMenu m_SubpanelPropsMenu "Help" f_DisplayURL "Subpanels Help" $[NSCDE_ROOT]/share/doc/html/NsCDE-Subpanels.html
+ I ChangeMenuStyle MiddleMenu3 m_SubpanelPropsMenu
+ I Popup m_SubpanelPropsMenu

DestroyFunc f_DeleteFromSubpanel
AddToFunc f_DeleteFromSubpanel
+ I Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -a delete

DestroyFunc f_SubpanelItemExec
AddToFunc f_SubpanelItemExec
+ I SendToModule $0 ChangeButton $[infostore.subpanel_$0_last_sel_id] Colorset 21
+ I SendToModule $0 ChangeButton $1 Colorset 16
+ I InfoStoreAdd subpanel_$0_last_sel_id $1
+ I $[2-]

DestroyFunc f_FrontPanelSetCustom
AddToFunc f_FrontPanelSetCustom
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn3"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn4"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn6"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn7"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn8"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn9"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn10"
+ I Test (EnvMatch infostore.wsmcolored 1) SendToModule FrontPanel ChangeButton FpWSM Colorset 22

# Called from f_FocusChange FvwmEvent MainLoop - this
# clears selected state for Front Panel and Style Manager
# buttons when their windows are not in focus.
# Break 1 is here to allow continuation in second level
# function f_FullyClearFrontPanelPressed
DestroyFunc f_ClearFrontPanelPressed
AddToFunc f_ClearFrontPanelPressed
+ I Test (EnvMatch infostore.fplastpressed Btn2) SendToModule MonthDayApplet SendString 2 2 unselect
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed Btn5) SendToModule CheckMailApplet SendString 1 3 unselect
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed Btn*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed NsCDE-Subpanel*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 1
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpExit) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpWSM) SendToModule WSM SendString 30 2 unselect
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpLite) SendToModule FpLite SendString 1 2 unselect
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpPGM) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpLock) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21

# Middle click on handle of the Front Panel clears selected state
# for all buttons.
DestroyFunc f_FullyClearFrontPanelPressed
AddToFunc f_FullyClearFrontPanelPressed
+ I f_ClearFrontPanelPressed
+ I InfoStoreRemove fplastpressed

# Called from f_FocusChange FvwmEvent MainLoop - this
# sets back selected state for Front Panel and Style Manager
# buttons when their windows are focused.
DestroyFunc f_PutFrontPanelPressed
AddToFunc f_PutFrontPanelPressed
+ I Test (EnvMatch infostore.fplastpressed Btn2) SendToModule MonthDayApplet SendString 2 2 unclick
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed Btn5) SendToModule CheckMailApplet SendString 1 3 unclick
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed Btn*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 29
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed NsCDE-Subpanel*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 17
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpExit) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 30
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpWSM) SendToModule WSM SendString 30 2 unclick
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpLite) SendToModule FpLite SendString 1 2 unclick
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpPGM) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 30
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed FpLock) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 30

# Function: f_FrontPanelVisualFocusOnEnter
# This function serves FrontPanel to make it appear as
# MouseFocus instead of ClickToFocus. Focus-in part.
# Called by: f_EnterWindow
# Parameters: $0 - Window ID from f_EnterWindow
DestroyFunc f_FrontPanelVisualFocusOnEnter
AddToFunc f_FrontPanelVisualFocusOnEnter
+ I Test (!EnvMatch infostore.fp_event_leave 1) Break 1
+ I CursorStyle WAIT left_ptr
+ I f_ToggleWindowStyle BorderColorset 2
+ I f_PutFrontPanelPressed
+ I Schedule 250 CursorStyle WAIT WaitCursor.xpm
+ I InfoStoreAdd fp_event_leave 0

# Function: f_FrontPanelVisualFocusOnLeave
# This function serves FrontPanel to make it appear as
# MouseFocus instead of ClickToFocus. Focus-out part.
# Called by: f_LeaveWindow
# Parameters: $0 - Window ID from f_LeaveWindow
DestroyFunc f_FrontPanelVisualFocusOnLeave
AddToFunc f_FrontPanelVisualFocusOnLeave
+ I Test (EnvMatch infostore.fp_event_leave 1) Break 1
+ I CursorStyle WAIT left_ptr
+ I f_ToggleWindowStyle BorderColorset 1
+ I f_ClearFrontPanelPressed
+ I Schedule 250 CursorStyle WAIT WaitCursor.xpm
+ I InfoStoreAdd fp_event_leave 1

#####################
# Misc core functions
#####################
# Global hook for page chnage
DestroyFunc f_ShowLocalPager
AddToFunc f_ShowLocalPager
+ I Deschedule 131313
+ I All (Iconic, "LocalPager") State 0
+ I All (State 0, "LocalPager") Iconify off
+ I All (State 0, "LocalPager") Piperead "echo Move +$(( $[vp.width]/2-$[w.width]/2 ))p +5p"
+ I Schedule 1000 131313 All ("LocalPager", !HasPointer, !Iconic) Iconify on
+ I Schedule 3000 131313 All ("LocalPager", !HasPointer, !Iconic) Iconify on
+ I Schedule 5000 131313 All ("LocalPager", !HasPointer, !Iconic) Iconify on
+ I Schedule 8000 131313 All ("LocalPager", !HasPointer, !Iconic) Iconify on
+ I Schedule 10000 131313 All ("LocalPager", !HasPointer, !Iconic) Iconify on
+ I All ("LocalPager") State 0 False

DestroyFunc f_BringLocalPager
AddToFunc f_BringLocalPager
+ I f_ShowLocalPager
+ I All (LocalPager) AnimatedMove m-5 m-6

# Setup Global Pager
DestroyFunc f_ShowGlobalPager
AddToFunc f_ShowGlobalPager
+ I All ("LocalPager", !Iconic) Iconify on
+ I All ("WspLocPager") KillModule FvwmPager WspLocPager
+ I Module FvwmPager -transient GlobalPager 0 $[infostore.fvwmdesknum]

# Best effort to find working web browser (for documentation displaying)
DestroyFunc f_FindBrowser
AddToFunc f_FindBrowser
+ I Test (x $[infostore.browser])
+ I TestRc (Match) Break
+ I TestRc (NoMatch) InfoStoreRemove browser
+ I Test (EnvIsSet BROWSER) InfoStoreAdd browser $[BROWSER]
+ I TestRc (Match) Break
+ I Test (x firefox) InfoStoreAdd browser firefox
+ I TestRc (Match) Break
+ I Test (x chromium-browser) InfoStoreAdd browser chromium-browser
+ I TestRc (Match) Break
+ I Test (x google-chrome) InfoStoreAdd browser google-chrome
+ I TestRc (Match) Break
+ I Test (x yandex-browser) InfoStoreAdd browser yandex-browser
+ I TestRc (Match) Break
+ I Test (x dillo) InfoStoreAdd browser dillo
+ I TestRc (Match) Break
+ I Test (x konqueror) InfoStoreAdd browser konqueror
+ I TestRc (Match) Break
+ I TestRc (NoMatch) None ("FindBrowser Function Error") FvwmForm ErrMsgForm \
 TITLE="FindBrowser Function Error" \
 TEXT="Error: Func:f_FindBrowser: Cannot find any known web browser to complete this action."

# Best effort to find working X11 terminal emulator
DestroyFunc f_FindTerm
AddToFunc f_FindTerm
+ I Test (x $[infostore.terminal])
+ I TestRc (Match) Break
+ I TestRc (NoMatch) InfoStoreRemove terminal
+ I Test (x urxvt) InfoStoreAdd terminal urxvt
+ I TestRc (Match) Break
+ I Test (x mate-terminal) InfoStoreAdd terminal mate-terminal
+ I TestRc (Match) Break
+ I Test (x xterm) InfoStoreAdd terminal xterm
+ I TestRc (Match) Break
+ I Test (x terminator) InfoStoreAdd terminal terminator
+ I TestRc (Match) Break
+ I Test (x roxterm) InfoStoreAdd terminal roxterm
+ I TestRc (Match) Break
+ I Test (x konsole) InfoStoreAdd terminal konsole
+ I TestRc (Match) Break
+ I Test (x gnome-terminal) InfoStoreAdd terminal gnome-terminal
+ I TestRc (Match) Break
+ I TestRc (NoMatch) None ("FindTerm Function Error") FvwmForm ErrMsgForm \
 TITLE="FindTerm Function Error" \
 TEXT="Error: Func:f_FindTerm: Cannot find any known X terminal application."

DestroyFunc f_WideTerm
AddToFunc f_WideTerm
+ I Current (*term*,Maximized) Maximize toggle
+ I TestRc (NoMatch) Current (*term*) ResizeMoveMaximize 76 72 50-50w -84p
+ I TestRc (Match) Break
+ I Current (*Term*,Maximized) Maximize toggle
+ I TestRc (NoMatch) Current (*Term*) ResizeMoveMaximize 76 72 50-50w -84p
+ I TestRc (Match) Break
+ I Current (*xvt*,Maximized) Maximize toggle
+ I TestRc (NoMatch) Current (*xvt*) ResizeMoveMaximize 76 72 50-50w -84p

# If the window exists, points the pointer to it. If it does not exists,
# Checks for program existance, removes arg1 and arg2 and execes the rest.
# Parameters: $0 - Window Name or Class Name, $1, binary to check for in PATH
# $2/$* - the rest of the command line.
DestroyFunc f_WarpOrExec
AddToFunc f_WarpOrExec
+ I Next ($0, CirculateHit) WarpToWindow 50 50
+ I TestRc (NoMatch) None ($0) Test (x $1) Exec exec $[2-]

# Exec program if it is not present, move to page/desk if present
# elseware, close if $1 is Close and present + visible on the current page.
DestroyFunc f_ToggleExecWindow
AddToFunc f_ToggleExecWindow
+ I None ($0,CirculateHit) Exec exec $[2-]
+ I Next ($0,CirculateHit,CurrentPage,Visible) $1
+ I Next ($0,CirculateHit) MoveToDesk
+ I Next ($0,CirculateHit) MoveToPage
+ I Next ($0,CirculateHit) Raise

# Spawn FVWM module if it is not present, move to page/desk if present
# elseware, kill module if present and visible on the current page.
DestroyFunc f_ToggleFvwmModule
AddToFunc f_ToggleFvwmModule
+ I None ($1,CirculateHit) Module $[0-]
+ I Next ($1,CirculateHit,CurrentPage,Visible) KillModule $0 $1
+ I Next ($1,CirculateHit) MoveToDesk
+ I Next ($1,CirculateHit) MoveToPage
+ I Next ($1,CirculateHit) Raise

# Execute FVWM function if $0 is not present, move to page/desk if present
# elseware, kill $0 if $1 is Close and present + visible on the current page.
DestroyFunc f_ToggleFvwmFunc
AddToFunc f_ToggleFvwmFunc
+ I None ($0,CirculateHit) $[2-]
+ I Next ($0,CirculateHit,CurrentPage,Visible) $1
+ I Next ($0,CirculateHit) MoveToDesk
+ I Next ($0,CirculateHit) MoveToPage
+ I Next ($0,CirculateHit) Raise

# Function which moves mouse in some direction before calling a command
# or another function. Used to move mouse from edge of the screen before
# calling things which are positioning themselves near the pointer position.
DestroyFunc f_MoveCursorAndExec
AddToFunc f_MoveCursorAndExec
+ I CursorMove $0 $1
+ I $[2-]

# Xscreensaver management
DestroyFunc f_Xscreensaver
AddToFunc f_Xscreensaver
+ I Test (!x xscreensaver-command) None ("Screensaver Error") FvwmForm ErrMsgForm \
    TITLE="Screensaver Error" \
    TEXT="Cannot find \\\"xscreensaver-command\\\" in PATH."
+ I TestRc (Match) Break
+ I InfoStoreAdd xsc_cmd $0
+ I Test (EnvMatch infostore.xsc_cmd -stop) Exec exec pkill -STOP -u $[USER] -xf xscreensaver
+ I Test (EnvMatch infostore.xsc_cmd -stop) SendToModule FrontPanel ChangeButton FpLock Icon NsCDE/FplockSuspended.s.pm
+ I Test (EnvMatch infostore.xsc_cmd -cont) Exec exec pkill -CONT -u $[USER] -xf xscreensaver
+ I Test (EnvMatch infostore.xsc_cmd -cont) SendToModule FrontPanel ChangeButton FpLock Icon CDE/Fplock.s.pm
+ I Test (EnvMatch infostore.xsc_cmd -lock) Exec exec xscreensaver-command $0
+ I Test (EnvMatch infostore.xsc_cmd -prefs) Exec exec xscreensaver-command $0
+ I Test (EnvMatch infostore.xsc_cmd -restart) Exec exec xscreensaver-command $0

# For displaying documentation purposes, or sending URL to web browser
DestroyFunc f_DisplayURL
AddToFunc f_DisplayURL
+ I Echo Sending Link $1 from $0 to $[infostore.browser]
+ I Module FvwmScript WaitNotice "$0" "Sending Link to $[infostore.browser]" " ... " 1800
+ I Exec exec $[infostore.browser] $1

# FVWM Version check function - usually called on init
DestroyFunc f_FvwmVersionCheck
AddToFunc f_FvwmVersionCheck
+ I Test (Version >= 2.6.7) Break 1
+ I Test (Version < 2.6.7) FvwmForm ErrMsgForm3 \
    TITLE="NsCDE: FVWM Version Check" \
    TEXT1="FVWM version $[version.num] is not supported by NsCDE $[NSCDE_VERSION] (FVWM 2.6.7 is the oldest supported and tested version)." \
    TEXT2="Functional problems, misbehaviour and unpredictable behaviour can be expected if this session" \
    TEXT3="is going to continue. Please install and use newer FVWM version, logout, or continue with a risk."
+ I Schedule 10000 Break
+ I Wait ErrMsgForm3
+ I All (CurrentPage,FvwmForm,ErrMsgForm3,"NsCDE: FVWM Version Check") Layer 0 6
+ I All (CurrentPage,FvwmForm,ErrMsgForm3,"NsCDE: FVWM Version Check") FlipFocus
+ I All (CurrentPage,FvwmForm,ErrMsgForm3,"NsCDE: FVWM Version Check") WarpToWindow 50 50

# Make a small time frame for action repeat to succeed.
# Used for Front Panel subpanels enablement currently
# $0 - name part of the infostore variable to set
# $1 - schedule time in milliseconds
# $2 - the rest of the command line
DestroyFunc f_DoubleClickExec
AddToFunc f_DoubleClickExec
+ I Test (EnvMatch infostore.$0 1) $2
+ I TestRc (Match) Break
+ I Test (!EnvMatch infostore.$0 1) InfoStoreAdd $0 1
+ I Schedule $1 InfoStoreRemove $0

##########################################
# Functions called from FvwmEvent MainLoop
##########################################
# Function: f_ChangePage
# Called by: Module FvwmEvent aliased to MainLoop
# Calls:
# 1. f_SendToWSM from Script Functions
DestroyFunc f_ChangePage
AddToFunc f_ChangePage
+ I f_SendToWSM
+ I f_SendToPGM
+ I All (AcceptsFocus, CurrentPage, !Iconic, Focused) FlipFocus NoWarp
+ I TestRc (NoMatch) Prev (AcceptsFocus, CurrentPage, !Iconic) FlipFocus NoWarp
+ I Test (EnvMatch infostore.pageraisefp 1) All ("FrontPanel") Raise
+ I Test (EnvMatch infostore.pageshowrootpager 1) f_ShowLocalPager
+ I Test (EnvMatch infostore.desklastpage 1) f_DeskLastPage Page
+ I f_UserChangePage

# Function: f_ChangeDesk
# Called by: Module FvwmEvent aliased to MainLoop
# Calls:
# 1. f_SendToWsm from Script Functions
DestroyFunc f_ChangeDesk
AddToFunc f_ChangeDesk
+ I f_SendToWSM
+ I Test (EnvMatch infostore.pageshowrootpager 1) f_ShowLocalPager
+ I Test (EnvMatch infostore.pageshowrootpager 1) \
    Current (FrontPanel, CirculateHit) All ("LocalPager", !Iconic) Move w+0 -84p
+ I Test (EnvMatch infostore.desklastpage 1) f_DeskLastPage Desk
+ I f_UserChangeDesk

# Function: f_DeskLastPage
# Called if infostore.desklastpage is 1 from f_ChangePage and f_ChangeDesk
# Removes possibility of race condition and double execution.
# Takes no parameters
DestroyFunc f_DeskLastPage
AddToFunc f_DeskLastPage
+ I Test (EnvMatch infostore.desklastpage_done 1) Break
+ I InfoStoreAdd last_page_dsk_$[desk.n] "$[page.nx] $[page.ny]"
+ I InfoStoreAdd lpactive_$[desk.n] 1
+ I InfoStoreAdd desklastpage_done 1
+ I Schedule 100 InfoStoreAdd desklastpage_done 0

# Function: f_SysAddWindowEvent
# Called by: Module FvwmEvent aliased to MainLoop
# Intended to be destroyed and re-added by user local config
DestroyFunc f_SysAddWindowEvent
AddToFunc f_SysAddWindowEvent
+ I Next (GlobalPager,!Transient) f_CenterWindow
+ I Any (CurrentPage,$[w.resource],$[w.class],State 2) Break
+ I WindowId $0 (!FixedSize,!FixedPosition,!State 2) f_GetWinGeometry ResizeMove
+ I WindowId $0 (FixedSize) f_GetWinGeometry f_SafeFvwmCmd Move | cut -d\' \' -f 3,4
+ I WindowId $0 (FixedPosition) f_GetWinGeometry f_SafeFvwmCmd Resize | cut -d\' \' -f 1,2
+ I WindowId $0 (CurrentPage,$[w.resource],$[w.class]) WindowStyle State 2
+ I f_AddWindowEvent $0

# Function: f_SysConfigureWindowEvent
# Called by: Module FvwmEvent aliased to MainLoop
# Intended for selection hilighting of the subpanel Front Panel launchers initially
DestroyFunc f_SysConfigureWindowEvent
AddToFunc f_SysConfigureWindowEvent
+ I WindowId $0 (NsCDE-Subpanel*) f_FrontPanelAction $[w.resource] M1 17
+ I f_ConfigureWindowEvent $0

DestroyFunc f_SysDestroyWindowEvent
AddToFunc f_SysDestroyWindowEvent
+ I Nop
+ I f_DestroyWindowEvent $0

# Function: f_FocusChange
# Called from FvwmEvent(1) on focus change
# Serves Style Manager, was serving FrontPanel before
# but now FrontPanel is handled by f_EnterWindow and
# f_LeaveWindow (enter_window and leave_window events
# of the FvwmEvent(1), not by focus_change event).
# Parameters: $0 - Window ID from FvwmEvent(1)
DestroyFunc f_FocusChange
AddToFunc f_FocusChange
+ I f_ChangeIconFocus $0
+ I InfoStoreAdd focus_winname_old "$[infostore.focus_winname_current]"
+ I InfoStoreAdd focus_winname_current $[w.name]
# + I Test (EnvMatch infostore.focus_winname_old FrontPanel) f_ClearFrontPanelPressed
# + I Test (EnvMatch infostore.focus_winname_current FrontPanel) f_PutFrontPanelPressed
+ I Test (EnvMatch infostore.focus_winname_old "Style Manager") SendToModule StyleMgr SendString 6 2 hideframe
+ I Test (EnvMatch infostore.focus_winname_current "Style Manager") SendToModule StyleMgr SendString 6 2 showframe

# Function: f_ChangeIconFocus
# Called from f_FocusChange which is called from FvwmEvent(1)
DestroyFunc f_ChangeIconFocus
AddToFunc f_ChangeIconFocus
# Parameters: $0 - Window (Icon) ID from FvwmEvent(1)
+ I WindowId $0 (Iconic, Focused) WindowStyle IconBackgroundColorset 19
+ I WindowId $[infostore.lastfocusedicon] (Iconic, !Focused) WindowStyle IconBackgroundColorset 18
+ I InfoStoreAdd lastfocusedicon $0

# Function f_EnterWindow 
# Called by the FvwmEvent(1) on enter_window event.
# Currently serves FrontPanel to make it appear as
# MouseFocus instead of ClickToFocus.
# Has also user function place holder call on the end.
# Parameters: $0 - Window ID from FvwmEvent(1)
DestroyFunc f_EnterWindow
AddToFunc f_EnterWindow
+ I WindowId $0 (FrontPanel, !Iconic) f_FrontPanelVisualFocusOnEnter
+ I f_UserEnterWindow $0

# Function f_LeaveWindow 
# Called by the FvwmEvent(1) on leave_window event.
# Currently serves FrontPanel to make it appear as
# MouseFocus instead of ClickToFocus.
# Has also user function place holder call on the end.
# Parameters: $0 - Window ID from FvwmEvent(1)
DestroyFunc f_LeaveWindow
AddToFunc f_LeaveWindow
+ I WindowId $0 (FrontPanel, !Iconic) f_FrontPanelVisualFocusOnLeave
+ I f_UserLeaveWindow $0

# Function: f_UserEnterWindow
# Called from f_EnterWindow on mouse hover
# Dummy (Nop) hook intended for local user redefinition.
# Parameters: $0 - Window ID from FvwmEvent(1)
DestroyFunc f_UserEnterWindow
AddToFunc f_UserEnterWindow
+ I Nop

# Function: f_UserLeaveWindow
# Called from f_LeaveWindow on mouse hover
# Dummy (Nop) hook intended for local user redefinition.
# Parameters: $0 - Window ID from FvwmEvent(1)
DestroyFunc f_UserLeaveWindow
AddToFunc f_UserLeaveWindow
+ I Nop

################################
# Functions for generating menus
################################

# Function: f_DeiconifyOnPageMenu
# Generates m_DeiconifyOnPage menu for icons
# which is called from m_IconOps icon menu.
DestroyFunc f_DeiconifyOnPageMenu
AddToFunc f_DeiconifyOnPageMenu
+ I f_SetWSMConf
+ I PipeRead 'PAGEMATRIX="$(($[infostore.pagematrixX] * $[infostore.pagematrixY]))"; \
              pg=0; while [ ${pg} -lt ${PAGEMATRIX} ]; do pg=$((pg + 1)); \
              pagenum=$(egrep "^PG:${pg}:.*:" $[infostore.wsmconf] | \
              cut -d: -f3 | sed "s/\\(.\\)\\(.\\)/\\1 \\2/g"); \
              pagename=$(egrep "^PG:${pg}:.*:" $[infostore.wsmconf] | cut -d: -f4); \
              if [ "x${pagename}" = "x" ]; then pagename="$pg"; fi; \
              echo "+ \\\"&${pg} $pagename\\\" f_DeiconifyOnPage $pagenum"; done'

DestroyFunc f_WindowOps
AddToFunc f_WindowOps
+ I AddToMenu $0 "&Refresh		$[infostore.km_xrefresh]" f_RegenerateWindow
+ I AddToMenu $0 "&Move		$[infostore.km_move]" Move
+ I AddToMenu $0 "&Size		$[infostore.km_resize]" Resize
+ I AddToMenu $0 "&Lower		$[infostore.km_raiselower]" Lower
+ I AddToMenu $0 "R&aise		$[infostore.km_raiselower]" Raise
+ I AddToMenu $0 "(De)&Iconify		$[infostore.km_iconify]" Iconify
+ I AddToMenu $0 "(De)S&hade		$[infostore.km_windowshade]" WindowShade
+ I AddToMenu $0 "(Un)Ma&ximize		$[infostore.km_max_100]" Maximize
+ I AddToMenu $0 "(Un)Stre&tch		$[infostore.km_max_84]" Piperead "echo Maximize 100 $(($[vp.height] - 84))p"
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "&Occupy Workspace...		$[infostore.km_occupyworkspace]" f_SendToOccupy
+ I AddToMenu $0 "Occupy &All Workspaces		$[infostore.km_sticktoggle]" Stick True
+ I AddToMenu $0 "&Unoccupy Workspaces		$[infostore.km_sticktoggle]" Stick False
+ I AddToMenu $0 "" Nop

DestroyFunc f_WindowOpsFP
AddToFunc f_WindowOpsFP
+ I AddToMenu $0 "&Refresh		$[infostore.km_xrefresh]" f_RegenerateWindow
+ I AddToMenu $0 "&Move		$[infostore.km_move]" Move
+ I AddToMenu $0 "&Size		$[infostore.km_resize]" Resize
+ I AddToMenu $0 "&Lower		$[infostore.km_raiselower]" Lower
+ I AddToMenu $0 "R&aise		$[infostore.km_raiselower]" Raise
+ I AddToMenu $0 "(De)&Iconify		$[infostore.km_iconify]" Iconify
+ I AddToMenu $0 "(De)S&hade		$[infostore.km_raiseshadefp]" f_RestoreFrontPanel WindowShade South
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "&Occupy Workspace...		$[infostore.km_occupyworkspace]" f_SendToOccupy
+ I AddToMenu $0 "Occupy &All Workspaces		$[infostore.km_sticktoggle]" Stick True
+ I AddToMenu $0 "&Unoccupy Workspaces		$[infostore.km_sticktoggle]" Stick False
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "&Close Front Panel		$[infostore.km_delete]" Current f_WindowOpsFPHelper $[w.id]
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "Reposition &Window		$[infostore.km_raisefp]" f_RestoreFrontPanel WindowShade Off

DestroyFunc f_WindowOpsFPHelper
AddToFunc f_WindowOpsFPHelper
+ I KillModule FvwmButtons FrontPanel
+ I Deschedule $0
+ I Schedule 100 Deschedule $0
+ I Schedule 200 Deschedule $0

DestroyFunc f_WindowOpsMore
AddToFunc f_WindowOpsMore
+ I AddToMenu $0 "Page ..." Popup m_MoveToPage
+ I AddToMenu $0 "Workspace ..." Popup m_MoveToWorkspace
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "Title Bar On/Off		$[infostore.km_toggletitle]" Pick (CirculateHit) f_ToggleWindowStyle Title
+ I AddToMenu $0 "Center Window			$[infostore.km_centerwindow]" Pick (CirculateHit) f_CenterWindow
+ I AddToMenu $0 "Window Layers ..." Popup m_WindowLayers
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "Identify" Module FvwmIdent

DestroyFunc f_WindowOpsBottom
AddToFunc f_WindowOpsBottom
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "&Delete		$[infostore.km_delete]" Delete
+ I AddToMenu $0 "&Close		$[infostore.km_close]" Close
+ I AddToMenu $0 "Destroy		$[infostore.km_destroy]" Destroy

DestroyFunc f_SubpanelSettings
AddToFunc f_SubpanelSettings
+ I AddToMenu $0 "Subpanel Settings" Current Module FvwmScript SubpanelSettings $[w.name]

# Fill Applications Menu:
# If there is APPMENU env set, use this as the desktop menu
# If not, check for XDG_CURRENT_DESKTOP, lowercase and use that
# If not, do not use "--desktop" while generating menus, but any
# xyz-applications.menu found in /etc/xdg/menus.
DestroyFunc f_ApplicationsMenu
AddToFunc f_ApplicationsMenu
+ I Test (EnvIsSet APPMENU) \
    PipeRead "${NSCDE_ROOT}/libexec/nscde-fvwm-menu-desktop -e --enable-mini-icons \
    --insert-in-menu m_Applications --include-items none \
    --app-icon ${NSCDE_ROOT}/share/icons/NsCDE/Nominiicon.xpm --menu-type applications \
    --desktop $APPMENU --mini-icon-dir ${FVWM_USERDIR}/icons"
+ I TestRc (Match) Break
+ I Test (EnvIsSet XDG_CURRENT_DESKTOP) \
    PipeRead 'echo -ne "SetEnv APPMENU "; echo $XDG_CURRENT_DESKTOP | tr A-Z a-z'
+ I Test (EnvIsSet APPMENU) \
    PipeRead "${NSCDE_ROOT}/libexec/nscde-fvwm-menu-desktop -e --enable-mini-icons \
    --insert-in-menu m_Applications --include-items none \
    --app-icon ${NSCDE_ROOT}/share/icons/NsCDE/Nominiicon.xpm --menu-type applications \
    --desktop $APPMENU --mini-icon-dir ${FVWM_USERDIR}/icons"
+ I TestRc (Match) Break
+ I TestRc (NoMatch) \
    PipeRead "${NSCDE_ROOT}/libexec/nscde-fvwm-menu-desktop -e --enable-mini-icons \
    --insert-in-menu m_Applications --include-items none \
    --app-icon ${NSCDE_ROOT}/share/icons/NsCDE/Nominiicon.xpm --menu-type applications \
    --mini-icon-dir ${FVWM_USERDIR}/icons"
 
DestroyFunc f_IconOps
AddToFunc f_IconOps
+ C Menu m_IconOps Icon +0 -100m Iconify off
+ M Move

#######################################################
# Placeholders for functions aimed for user to override
#######################################################
# Called from the CheckMailApplet (left from the WSM on Front Panel)
DestroyFunc f_CheckMail
AddToFunc f_CheckMail
+ I None ("Check Mail Function") FvwmForm ErrMsgForm \
    TITLE="Check Mail Function" \
    TEXT="Write your f_CheckMail function in $[FVWM_USERDIR]/NsCDE-Functions.local."

# Called from MonthDayApplet (right of the watch on Front Panel)
DestroyFunc f_Calendar
AddToFunc f_Calendar
+ I None ("Calendar Function") FvwmForm ErrMsgForm \
    TITLE="Calendar Function" \
    TEXT="Write your f_Calendar function in $[FVWM_USERDIR]/NsCDE-Functions.local."

# Currently unused.
DestroyFunc f_Mixer
AddToFunc f_Mixer
+ I Test (x pnmixer x stalonetray) Exec exec pnmixer
+ I TestRc (NoMatch) None ("Audio Mixer Function") FvwmForm ErrMsgForm \
    TITLE="Audio Mixer Function" \
    TEXT="Write your f_Mixer function in $[FVWM_USERDIR]/NsCDE-Functions.local."

# Function place holder for user additions to root menu
DestroyFunc f_AddCustomToRootMenu
AddToFunc f_AddCustomToRootMenu
+ I Nop

# Called from FvwmEvent MainLoop. Here, user can set
# own hooks to be done when current desk changes.
DestroyFunc f_UserChangeDesk
AddToFunc f_UserChangeDesk
+ I Nop

# Called from FvwmEvent MainLoop. Here, user can set
# own hooks to be done when current page changes.
DestroyFunc f_UserChangePage
AddToFunc f_UserChangePage
+ I Nop

# Hook of the f_SysAddWindowEvent called from
# FvwmEvent on add_window event
DestroyFunc f_AddWindowEvent
AddToFunc f_AddWindowEvent
+ I Nop

# Hook of the f_SysConfigureWindowEvent called from
# FvwmEvent on configure_window event
DestroyFunc f_ConfigureWindowEvent
AddToFunc f_ConfigureWindowEvent
+ I Nop

# Hook of the f_SysDestroyWindowEvent called from
# FvwmEvent on destroy_window event
DestroyFunc f_DestroyWindowEvent
AddToFunc f_DestroyWindowEvent
+ I Nop

#####################################
# Functions used in NsCDE FvwmScripts
#####################################

# Function: f_RunQuickScriptDialog
# Center $0 where $0 is a dialog
# Depends on f_AnimatedCenterWarp
# $1 and $2 are coordinates for WarpToWindow used by f_AnimatedCenterWarp
DestroyFunc f_RunQuickScriptDialog
AddToFunc f_RunQuickScriptDialog
+ I None ($0) Module FvwmScript $*
+ I Wait $0
+ I f_AnimatedCenterWarp $0 50 45

# Function: f_DesksMenu
# Genetates menu for List widget of OccupyWorkspace Script
# Depends on: f_SetWSMConf
DestroyFunc f_DesksMenu
AddToFunc f_DesksMenu
+ I f_SetWSMConf
+ I PipeRead 'echo -ne "InfoStoreAdd desksmenu "; echo $(egrep "^WSP:.*:" $[infostore.wsmconf] | sort -t: -nk2 | \
              awk -F: \'{ if ($$$1 == \"WSP\") print \"|\" $$$3 }\' | \
              head -$[infostore.desknum]) | sed "s/^|//g; s/\ //g"'

# Function: f_SendToOccupy
# Calls and sets up OccupyWorkspace Script with fvwm variables
# Depends on: f_RunQuickScriptDialog, f_AnimatedCenterWarp, f_DesksMenu
DestroyFunc f_SendToOccupy
AddToFunc f_SendToOccupy
+ I f_DesksMenu
+ I f_RunQuickScriptDialog OccupyWorkspace
+ I SendToModule OccupyWorkspace SendString 9 1 $[w.id] $[w.name]
+ I SendToModule OccupyWorkspace SendString 1 1 $[desk.n]
+ I SendToModule OccupyWorkspace SendString 1 2 $[infostore.desksmenu]

# Called from OccupyWorkspace
# Function: f_OccupyDesk
# Main task of OccupyWorkspace
DestroyFunc f_OccupyDesk
AddToFunc f_OccupyDesk
+ I WindowId $0 Stick False
+ I WindowId $0 MoveToDesk $1 $2
+ I $3 $1 $2

# Without this, WSM does not change it's pressed/unpressed button state
# if desk is changed by some other means.
# Function f_SendToWSM
# WSM Helper
DestroyFunc f_SendToWSM
AddToFunc f_SendToWSM
+ I SendToModule WSM SendString 40 10 $[desk.n]$[page.nx]$[page.ny]

# Unclick Page Manager from itself (visual function only)
# Function f_SendToPGM
# PGM Helper
DestroyFunc f_SendToPGM
AddToFunc f_SendToPGM
+ I SendToModule FrontPanel ChangeButton FpPGM Icon \
    NsCDE/Wsm_$[infostore.pagematrixX]x$[infostore.pagematrixY]_$[page.nx]$[page.ny].xpm

# Function: f_SameWspActionForWSM
# Called by: Workspace Manager when current desk button is clicked
# Calls: f_ShowLocalPager
DestroyFunc f_SameWspActionForWSM
AddToFunc f_SameWspActionForWSM
+ I f_SendToWSM
+ I Test (EnvMatch infostore.pageshowrootpager 0) Break
+ I Current (FrontPanel, CirculateHit) All ("LocalPager", Iconic) f_ShowLocalPager
+ I Current (FrontPanel, CirculateHit) All ("LocalPager", !Iconic) Move w+0 -84p
+ I Current (FrontPanel, CirculateHit) All ("LocalPager", !Iconic) WarpToWindow 25 95

# Fplite applet on Front Panel, right top of WSM
# Can be overriden by user if user has some fancy
# app for processes and system resources.
DestroyFunc f_FpLiteClickAction
AddToFunc f_FpLiteClickAction
+ I Test (EnvMatch NSCDE_OS SunOS) Exec exec $[infostore.terminal] -e prstat
+ I TestRc (Match) Break
+ I Test (EnvMatch NSCDE_OS AIX) Exec exec $[infostore.terminal] -e topas
+ I TestRc (Match) Break
+ I Test (x top) Exec exec $[infostore.terminal] -e top
+ I TestRc (Match) Break
+ I None ("FpLite Function Error") FvwmForm ErrMsgForm \
 TITLE="FpLite Function Error" \
 TEXT="Error: Func:f_FpLiteClickAction: Cannot find top(1), prstat(1m) or topas(5) in PATH."

# SysActionDialog
DestroyFunc f_QuitAndExit
AddToFunc f_QuitAndExit
+ I Test (EnvIsSet SESSION_MANAGER) SetEnv QuitCmd SaveQuitSession
+ I Test (!EnvIsSet SESSION_MANAGER) SetEnv QuitCmd Quit
+ I Echo LOG: Quit NsCDE
+ I Exec exec sync
+ I Test (!EnvIsSet SESSION_MANAGER) Deschedule
+ I Test (!EnvIsSet SESSION_MANAGER) All Delete
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 600 All Close
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 800 All Destroy
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 1200 $[QuitCmd]
+ I Test (EnvIsSet SESSION_MANAGER) Schedule 200 $[QuitCmd]

# SysActionDialog
DestroyFunc f_QuitAndShutdown
AddToFunc f_QuitAndShutdown
+ I Test (EnvIsSet SESSION_MANAGER) SetEnv QuitCmd SaveQuitSession
+ I Test (!EnvIsSet SESSION_MANAGER) SetEnv QuitCmd Quit
+ I Echo LOG: Quit NsCDE
+ I Exec exec sync
+ I Test (!EnvIsSet SESSION_MANAGER) Deschedule
+ I Test (!EnvIsSet SESSION_MANAGER) All Delete
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 600 All Close
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 800 All Destroy
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 1200 Exec exec sudo init $0
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 1600 $[QuitCmd]
+ I Test (EnvIsSet SESSION_MANAGER) Exec exec sudo init $0
+ I Test (EnvIsSet SESSION_MANAGER) Schedule 400 $[QuitCmd]

# Designed as self-helper for Fvwm Scripts
DestroyFunc f_UnclickScript
AddToFunc f_UnclickScript
+ I Schedule $0 SendToModule $1 SendString $2 $3 $4

