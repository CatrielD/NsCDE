#################################
# Core Window Operation Functions
#################################

# Function: f_MoveToDeskAndPage
# Moves window to specific desk and page in one call
# similar to GoToDeskAndPage builtin
DestroyFunc f_MoveToDeskAndPage
AddToFunc f_MoveToDeskAndPage
+ I MoveToDesk $0 $1
+ I MoveToPage $2 $3

# Mouse Bindings Functions
DestroyFunc f_RaiseMoveX
AddToFunc f_RaiseMoveX
+ I Raise
+ M $0
+ D $1

DestroyFunc f_RaiseMove
AddToFunc f_RaiseMove
+ I Raise
+ M $0

DestroyFunc f_MoveRaiseLower
AddToFunc f_MoveRaiseLower
+ M Move
+ C RaiseLower
+ D Raise
+ D Move
+ H Raise
+ H Move

# RaiswLower + custom action as $0
DestroyFunc f_RaiseLowerX
AddToFunc f_RaiseLowerX
+ M $0
+ D RaiseLower
+ H Nop

DestroyFunc MoveToCurrent
AddToFunc MoveToCurrent
+ I ThisWindow MoveToPage
+ I ThisWindow MoveToDesk

DestroyFunc f_ButtonMaximize
AddToFunc f_ButtonMaximize
+ M Maximize 0 100
+ M $0
+ M $1
+ C Piperead "echo Maximize 100 $(($[vp.height] - 78))p"
+ C $0
+ C $1
+ D Maximize 100 100
+ D $0
+ D $1

DestroyFunc f_RegenerateWindow
AddToFunc f_RegenerateWindow
+ I RecaptureWindow $[w.id]
+ I RefreshWindow

DestroyFunc f_ToggleTitle
AddToFunc f_ToggleTitle
+ I ThisWindow (State 1) WindowStyle Title
+ I TestRc (Match) State 1 False
+ I TestRc (Match) Break
+ I WindowStyle !Title
+ I State 1 True

# Used to center window and warp pointer to exact coordinates, usually 50 50
DestroyFunc f_AnimatedCenterWarp
AddToFunc f_AnimatedCenterWarp
+ I Next ($0, CirculateHit) AnimatedMove 50-50w 50-50w Warp
+ I Next ($0, CirculateHit) WarpToWindow $1 $2

DestroyFunc f_CenterWindow
AddToFunc f_CenterWindow
+ I ThisWindow Move 50-50w 50-50w

DestroyFunc f_DeiconifyOnPage
AddToFunc f_DeiconifyOnPage
+ I Iconify off
+ I MoveToPage $0 $1

DestroyFunc f_MoveToPage
AddToFunc f_MoveToPage
+ I f_SetWSMConf
+ I PipeRead 'PAGEMATRIX="$(($[infostore.pagematrixX] * $[infostore.pagematrixY]))"; \
              pg=0; while [ ${pg} -lt ${PAGEMATRIX} ]; do pg=$((pg + 1)); \
              pagenum=$(egrep "^PG:${pg}:.*:" $[infostore.wsmconf] | \
              cut -d: -f3 | sed "s/\\(.\\)\\(.\\)/\\1 \\2/g"); \
              pagename=$(egrep "^PG:${pg}:.*:" $[infostore.wsmconf] | cut -d: -f4); \
              if [ "x${pagename}" = "x" ]; then pagename="$pg"; fi; \
              echo "+ \\\"&${pg} Move to Page:		$pagename\\\" MoveToPage $pagenum"; done'

DestroyFunc f_MoveToWorkspace
AddToFunc f_MoveToWorkspace
+ I f_SetWSMConf
+ I PipeRead 'wsp=0; while [ ${wsp} -lt $[infostore.desknum] ]; do wsp=$((wsp + 1)); \
              wspname=$(egrep "^WSP:${wsp}:" $[infostore.wsmconf] | cut -d: -f3); \
              if [ "x${wspname}" = "x" ]; then wspname="$wsp"; fi; \
              echo "+ \\\"&${wsp} Move to Workspace:		${wspname}\\\" MoveToDesk 0 $(($wsp - 1))"; done'

DestroyFunc f_SaveGeometry
AddToFunc f_SaveGeometry
+ I Current (HasPointer) Exec exec $[NSCDE_ROOT]/bin/confset.py \
  -t ini -c $[FVWM_USERDIR]/GeoDB.ini -s $[vp.width]x$[vp.height] \
  -k $[w.class] -v "$[cw.width]p $[cw.height]p $[w.x]p $[w.y]p"

DestroyFunc f_RepositionWindow
AddToFunc f_RepositionWindow
+ I Current PipeRead "echo ResizeMove $($[NSCDE_ROOT]/bin/confget.py \
  -c $[FVWM_USERDIR]/GeoDB.ini -s $[vp.width]x$[vp.height] -k $[w.class])"

# Middle mouse on titlebar
DestroyFunc f_ScreenShot
AddToFunc f_ScreenShot
+ I Test (x import) Current Exec exec import $0 -window $[w.id] "$[HOME]/ScreenShot_$[w.class].$[w.id].$(date +%Y%m%d.%H%M%S).png"
+ I TestRc (NoMatch) Test (x xwd) Current Exec exec xwd $0 -out "$[HOME]/ScreenShot_$[w.class].$[w.id].$(date +%Y%m%d.%H%M%S).xwd"
+ I TestRc (NoMatch) None ("Screenshot Function Error") FvwmForm ErrMsgForm \
 TITLE="Screenshot Function Error" \
 TEXT="Error: Func:f_ScreenShot: No import(1) or xwd(1) for making a screenshot found in PATH."

# Middle mouse on titlebar
DestroyFunc f_XwinInfo
AddToFunc f_XwinInfo
+ I Test (x xwininfo) Current Exec exec $[infostore.terminal] -e \
    "ksh -c 'echo -ne \"\033]0;X Window Info\007\"; xwininfo -all -id $[w.id] | less'"
+ I TestRc (NoMatch) None ("XwinInfo Function Error") FvwmForm ErrMsgForm \
 TITLE="XwinInfo Function Error" \
 TEXT="Error: Func:f_XwinInfo: No xwininfo(1) tool found in PATH."

# Middle mouse on titlebar
DestroyFunc f_Xprop
AddToFunc f_Xprop
+ I Test (x xprop) Current Exec exec $[infostore.terminal] -e \
    "ksh -c 'echo -ne \"\033]0;X Window Properties\007\"; xprop -id $[w.id] | less'"
+ I TestRc (NoMatch) None ("X Prop Function Error") FvwmForm ErrMsgForm \
 TITLE="X Prop Function Error" \
 TEXT="Error: Func:f_Xprop: No xprop(1) tool found in PATH."

# Root Window Screenshot
DestroyFunc f_RootScreenShot
AddToFunc f_RootScreenShot
+ I Test (x import) Schedule $0 Exec exec import -window root "$[HOME]/RootWinShot.$(date +%Y%m%d.%H%M%S).png"
+ I TestRc (NoMatch) Test (x xwd) Schedule $0 Exec exec xwd -root -out "$[HOME]/RootWinShot.$(date +%Y%m%d.%H%M%S).xwd"
+ I TestRc (NoMatch) None ("Root Screenshot Function Error") FvwmForm ErrMsgForm \
 TITLE="Root Screenshot Function Error" \
 TEXT="Error: Func:f_RootScreenShot: No import(1) or xwd(1) for making a root window screenshot found in PATH."

#######################
# Front Panel functions
#######################
DestroyFunc f_RestartFrontPanel
AddToFunc f_RestartFrontPanel
+ I KillModule FvwmButtons FrontPanel
+ I f_Readcfg FrontPanel
+ I ModuleSynchronous Timeout 5 FvwmButtons FrontPanel
+ I Schedule 100 f_FrontPanelSetIcons

DestroyFunc f_RaiseShadeFrontPanel
AddToFunc f_RaiseShadeFrontPanel
+ I None (CirculateHit, FrontPanel) InfoStoreAdd _initfp 1
+ I Test (EnvMatch infostore._initfp 1) ModuleSynchronous FvwmButtons FrontPanel
+ I Test (EnvMatch infostore._initfp 1) Schedule 30 f_FrontPanelSetIcons
+ I Test (EnvMatch infostore._initfp 1) Schedule 300 f_FrontPanelSetIcons
+ I Test (EnvMatch infostore._initfp 1) InfoStoreRemove _initfp
+ I All (FrontPanel) Iconify off
+ I All (FrontPanel) WindowShade South
+ I All (FrontPanel) RaiseLower
+ I All (FrontPanel) Piperead "echo AnimatedMove $(($[vp.width] / 2 - 996 / 2))p -0"

DestroyFunc f_RaiseFrontPanel
AddToFunc f_RaiseFrontPanel
+ I All (FrontPanel) Iconify off
+ I All (FrontPanel) WindowShade off
+ I All (FrontPanel) RaiseLower
+ I All (FrontPanel) Resize 996p 74p
+ I All (FrontPanel) Piperead "echo AnimatedMove $(($[vp.width] / 2 - 996 / 2))p -0"

DestroyFunc f_WarpToFrontPanel
AddToFunc f_WarpToFrontPanel
+ I f_RaiseFrontPanel
+ I All (FrontPanel,CirculateHit,!HasPointer) WarpToWindow 50 50
+ I TestRc (Match) Break
+ I Prev (AcceptsFocus) WarpToWindow !raise 50 50

DestroyFunc f_KeyFromFpToSubanel
AddToFunc f_KeyFromFpToSubanel
+ I None ($0) SendToModule FrontPanel PressButton $0
+ I None ($0) Wait $0
+ I Schedule 250 All ($0) WarpToWindow 50 50
+ I Schedule 2000 Break

DestroyFunc f_KeyFromSubpanelToFP
AddToFunc f_KeyFromSubpanelToFP
+ I All ($0) SendToModule FrontPanel PressButton $0
+ I f_WarpToFrontPanel

# We must call nscde-fvwm-menu-desktop here to regenerate local icon cache just in case
DestroyFunc f_RefreshSubpanel
AddToFunc f_RefreshSubpanel
+ I Exec exec $NSCDE_ROOT/libexec/nscde-fvwm-menu-desktop --enable-mini-icons -s 32 --include-items none --plain-list > /dev/null 2>&1
+ I Exec exec $[NSCDE_ROOT]/libexec/generate_subpanels > $[FVWM_USERDIR]/NsCDE-Subpanels.conf
+ I f_ReadCfg Subpanels
+ I KillModule FvwmButtons $0
+ I Schedule 100 SendToModule FrontPanel PressButton $0
+ I Schedule 900 SendToModule FrontPanel PressButton $0
+ I Exec exec /opt/NsCDE/bin/xdowrapper

DestroyFunc f_EnableSubpanel
AddToFunc f_EnableSubpanel
+ I Exec exec cp -f $[NSCDE_ROOT]/config/$0.conf $FVWM_USERDIR/$0.conf
+ I Schedule 5000 f_RestartFrontPanel

DestroyFunc f_FrontPanelAction
AddToFunc f_FrontPanelAction
+ I Piperead "$[NSCDE_ROOT]/libexec/fpexec $0 $1"
+ I Test (EnvMatch infostore.fplastpressed Btn2) SendToModule MonthDayApplet SendString 2 1 unselect
+ I Test (EnvMatch infostore.fplastpressed Btn5) SendToModule CheckMailApplet SendString 1 2 unselect
+ I Test (EnvMatch infostore.fplastpressed Btn*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21
+ I Schedule 100 SendToModule FrontPanel ChangeButton $0 Colorset 29
+ I InfoStoreAdd fplastpressed $0

DestroyFunc f_SubpanelPropsMenu
AddToFunc f_SubpanelPropsMenu
+ I DestroyMenu m_SubpanelPropsMenu
+ I AddToMenu m_SubpanelPropsMenu " $2 " Title
+ I AddToMenu m_SubpanelPropsMenu "$2" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -e
+ I AddToMenu m_SubpanelPropsMenu "" Nop
+ I AddToMenu m_SubpanelPropsMenu "Move Up" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -a up
+ I AddToMenu m_SubpanelPropsMenu "Move Down" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -a down
+ I AddToMenu m_SubpanelPropsMenu "Move to Beginning" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -a begin
+ I AddToMenu m_SubpanelPropsMenu "Move to End" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -a end
+ I AddToMenu m_SubpanelPropsMenu "Delete" Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -t "$2" -d
+ I AddToMenu m_SubpanelPropsMenu "" Nop
+ I AddToMenu m_SubpanelPropsMenu "Help" f_DisplayURL "Subpanels Help" $[NSCDE_ROOT]/share/doc/html/NsCDE-Subpanels.html
+ I Popup m_SubpanelPropsMenu

DestroyFunc f_DeleteFromSubpanel
AddToFunc f_DeleteFromSubpanel
+ I Exec exec $[NSCDE_ROOT]/libexec/subpanel_menuitem_props -p $0 -s $1 -a delete

DestroyFunc f_FrontPanelSetIcons
AddToFunc f_FrontPanelSetIcons
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn3"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn4"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn6"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn7"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn8"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn9"
+ I Piperead "$[NSCDE_ROOT]/libexec/fpseticon Btn10"

# Called from f_FocusChange FvwmEvent MainLoop - this
# clears selected state for Front Panel and Style Manager
# buttons when their windows are not in focus.
# Break 1 is here to allow continuation in second level
# function f_FullyClearFrontPanelPressed
DestroyFunc f_ClearFrontPanelPressed
AddToFunc f_ClearFrontPanelPressed
+ I Test (EnvMatch infostore.fplastpressed Btn2) SendToModule MonthDayApplet SendString 2 1 unselect
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed Btn5) SendToModule CheckMailApplet SendString 1 2 unselect
+ I TestRc (Match) Break 1
+ I Test (EnvMatch infostore.fplastpressed Btn*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 21

# Middle click on handle of the Front Panel clears selected state
# for all buttons.
DestroyFunc f_FullyClearFrontPanelPressed
AddToFunc f_FullyClearFrontPanelPressed
+ I f_ClearFrontPanelPressed
+ I InfoStoreRemove fplastpressed

# Called from f_FocusChange FvwmEvent MainLoop - this
# sets back selected state for Front Panel and Style Manager
# buttons when their windows are focused.
DestroyFunc f_PutFrontPanelPressed
AddToFunc f_PutFrontPanelPressed
+ I Test (EnvMatch infostore.focus_winname_old FrontPanel) f_ClearFrontPanelPressed
+ I TestRc (Match) Break
+ I Test (EnvMatch infostore.fplastpressed Btn2) SendToModule MonthDayApplet SendString 2 1 unclick
+ I TestRc (Match) Break
+ I Test (EnvMatch infostore.fplastpressed Btn5) SendToModule CheckMailApplet SendString 1 2 unclick
+ I TestRc (Match) Break
+ I Test (EnvMatch infostore.fplastpressed Btn*) SendToModule FrontPanel ChangeButton $[infostore.fplastpressed] Colorset 29

#####################
# Misc core functions
#####################
# Global hook for page chnage
DestroyFunc f_ShowRootPagerOnChangePage
AddToFunc f_ShowRootPagerOnChangePage
+ I Deschedule 131313
+ I All (Iconic, "RootPager") State 0
+ I All (State 0, "RootPager") Iconify off
+ I All (State 0, "RootPager") Piperead "echo Move +$(( $[vp.width]/2-$[w.width]/2 ))p +5p"
+ I Schedule 1500 131313 All ("RootPager", !HasPointer, !Iconic) Iconify on
+ I Schedule 3500 131313 All ("RootPager", !HasPointer, !Iconic) Iconify on
+ I Schedule 8500 131313 All ("RootPager", !HasPointer, !Iconic) Iconify on
+ I All ("RootPager") State 0 False

# Best effort to find working web browser (for documentation displaying)
DestroyFunc f_FindBrowser
AddToFunc f_FindBrowser
+ I Test (x $[infostore.browser])
+ I TestRc (Match) Break
+ I TestRc (NoMatch) InfoStoreRemove browser
+ I Test (EnvIsSet BROWSER) InfoStoreAdd browser $[BROWSER]
+ I TestRc (Match) Break
+ I Test (x firefox) InfoStoreAdd browser firefox
+ I TestRc (Match) Break
+ I Test (x chromium-browser) InfoStoreAdd browser chromium-browser
+ I TestRc (Match) Break
+ I Test (x google-chrome) InfoStoreAdd browser google-chrome
+ I TestRc (Match) Break
+ I Test (x yandex-browser) InfoStoreAdd browser yandex-browser
+ I TestRc (Match) Break
+ I Test (x dillo) InfoStoreAdd browser dillo
+ I TestRc (Match) Break
+ I Test (x konqueror) InfoStoreAdd browser konqueror
+ I TestRc (Match) Break
+ I TestRc (NoMatch) None ("FindBrowser Function Error") FvwmForm ErrMsgForm \
 TITLE="FindBrowser Function Error" \
 TEXT="Error: Func:f_FindBrowser: Cannot find any known web browser to complete this action."

# Best effort to find working X11 terminal emulator
DestroyFunc f_FindTerm
AddToFunc f_FindTerm
+ I Test (x $[infostore.terminal])
+ I TestRc (Match) Break
+ I TestRc (NoMatch) InfoStoreRemove terminal
+ I Test (x urxvt) InfoStoreAdd terminal urxvt
+ I TestRc (Match) Break
+ I Test (x mate-terminal) InfoStoreAdd terminal mate-terminal
+ I TestRc (Match) Break
+ I Test (x xterm) InfoStoreAdd terminal xterm
+ I TestRc (Match) Break
+ I Test (x terminator) InfoStoreAdd terminal terminator
+ I TestRc (Match) Break
+ I Test (x roxterm) InfoStoreAdd terminal roxterm
+ I TestRc (Match) Break
+ I Test (x konsole) InfoStoreAdd terminal konsole
+ I TestRc (Match) Break
+ I Test (x gnome-terminal) InfoStoreAdd terminal gnome-terminal
+ I TestRc (Match) Break
+ I TestRc (NoMatch) None ("FindTerm Function Error") FvwmForm ErrMsgForm \
 TITLE="FindTerm Function Error" \
 TEXT="Error: Func:f_FindTerm: Cannot find any known X terminal application."

DestroyFunc f_WideTerm
AddToFunc f_WideTerm
+ I Current (*term*,Maximized) Maximize toggle
+ I TestRc (NoMatch) Current (*term*) ResizeMoveMaximize 76 72 50-50w -84p
+ I TestRc (Match) Break
+ I Current (*Term*,Maximized) Maximize toggle
+ I TestRc (NoMatch) Current (*Term*) ResizeMoveMaximize 76 72 50-50w -84p
+ I TestRc (Match) Break
+ I Current (*xvt*,Maximized) Maximize toggle
+ I TestRc (NoMatch) Current (*xvt*) ResizeMoveMaximize 76 72 50-50w -84p

# If the window exists, points the pointer to it. If it does not exists,
# Checks for program existance, removes arg1 and arg2 and execes the rest.
# Parameters: $0 - Window Name or Class Name, $1, binary to check for in PATH
# $2/$* - the rest of the command line.
DestroyFunc f_WarpOrExec
AddToFunc f_WarpOrExec
+ I Next ($0, CirculateHit) WarpToWindow
+ I None ($0) Test (x $1) Piperead "echo -ne 'Exec exec '; echo \"$*\" | cut -d\" \" -f3-"

# Exec program if it is not present, move to page/desk if present
# elseware, close if $1 is Close and present + visible on the current page.
DestroyFunc f_ToggleExecWindow
AddToFunc f_ToggleExecWindow
+ I None ($0,CirculateHit) Exec exec $[2-]
+ I Next ($0,CirculateHit,CurrentPage,Visible) $1
+ I Next ($0,CirculateHit) MoveToDesk
+ I Next ($0,CirculateHit) MoveToPage
+ I Next ($0,CirculateHit) Raise

# Spawn FVWM module if it is not present, move to page/desk if present
# elseware, kill module if present and visible on the current page.
DestroyFunc f_ToggleFvwmModule
AddToFunc f_ToggleFvwmModule
+ I None ($1,CirculateHit) Module $[0-]
+ I Next ($1,CirculateHit,CurrentPage,Visible) KillModule $0 $1
+ I Next ($1,CirculateHit) MoveToDesk
+ I Next ($1,CirculateHit) MoveToPage
+ I Next ($1,CirculateHit) Raise

# Execute FVWM function if $0 is not present, move to page/desk if present
# elseware, kill $0 if $1 is Close and present + visible on the current page.
DestroyFunc f_ToggleFvwmFunc
AddToFunc f_ToggleFvwmFunc
+ I None ($0,CirculateHit) $[2-]
+ I Next ($0,CirculateHit,CurrentPage,Visible) $1
+ I Next ($0,CirculateHit) MoveToDesk
+ I Next ($0,CirculateHit) MoveToPage
+ I Next ($0,CirculateHit) Raise

# Xscreensaver management
DestroyFunc f_Xscreensaver
AddToFunc f_Xscreensaver
+ I Test (!x xscreensaver-command) None ("Screensaver Error") FvwmForm ErrMsgForm \
    TITLE="Screensaver Error" \
    TEXT="Cannot find \\\"xscreensaver-command\\\" in PATH."
+ I TestRc (Match) Break
+ I Exec exec xscreensaver-command $0

# For displaying documentation purposes, or sending URL to web browser
DestroyFunc f_DisplayURL
AddToFunc f_DisplayURL
+ I Echo Sending Link $1 from $0 to $[infostore.browser]
+ I Module FvwmScript WaitNotice "$0" "Sending Link to $[infostore.browser]" " ... " 1800
+ I Exec exec $[infostore.browser] $1

# Make a small time frame for action repeat to succeed.
# Used for Front Panel subpanels enablement currently
# $0 - name part of the infostore variable to set
# $1 - schedule time in milliseconds
# $2 - the rest of the command line
DestroyFunc f_DoubleClickExec
AddToFunc f_DoubleClickExec
+ I Test (EnvMatch infostore.$0 1) $2
+ I TestRc (Match) Break
+ I Test (!EnvMatch infostore.$0 1) InfoStoreAdd $0 1
+ I Schedule $1 InfoStoreRemove $0

##########################################
# Functions called from FvwmEvent MainLoop
##########################################
# Function: f_ChangePage
# Called by: Module FvwmEvent aliased to MainLoop
# Calls:
# 1. f_SendToWSM from Script Functions
DestroyFunc f_ChangePage
AddToFunc f_ChangePage
+ I f_SendToWSM
+ I f_SendToPageIndicator
+ I Test (EnvMatch infostore.pageraisefp 1) All ("FrontPanel") Raise
+ I Test (EnvMatch infostore.pageshowrootpager 1) f_ShowRootPagerOnChangePage
+ I f_UserChangePage

# Function: f_ChangeDesk
# Called by: Module FvwmEvent aliased to MainLoop
# Calls:
# 1. f_SendToWsm from Script Functions
DestroyFunc f_ChangeDesk
AddToFunc f_ChangeDesk
+ I f_SendToWSM
+ I f_UserChangeDesk

# Function: f_SysAddWindowEvent
# Called by: Module FvwmEvent aliased to MainLoop
# Intended to be destroyed and re-added by user local config
DestroyFunc f_SysAddWindowEvent
AddToFunc f_SysAddWindowEvent
+ I Next (GlobalPager,!Transient) f_CenterWindow
+ I f_AddWindowEvent $0

DestroyFunc f_FocusChange
AddToFunc f_FocusChange
+ I InfoStoreAdd focus_winname_old "$[infostore.focus_winname_current]"
+ I InfoStoreAdd focus_winname_current $[w.name]
+ I Test (EnvMatch infostore.focus_winname_old FrontPanel) f_ClearFrontPanelPressed
+ I Test (EnvMatch infostore.focus_winname_current FrontPanel) f_PutFrontPanelPressed
+ I Test (EnvMatch infostore.focus_winname_old "Style Manager") SendToModule StyleMgr SendString 6 2 hideframe
+ I Test (EnvMatch infostore.focus_winname_current "Style Manager") SendToModule StyleMgr SendString 6 2 showframe

################################
# Functions for generating menus
################################

DestroyFunc f_DeiconifyOnPageMenu
AddToFunc f_DeiconifyOnPageMenu
+ I f_SetWSMConf
+ I PipeRead 'PAGEMATRIX="$(($[infostore.pagematrixX] * $[infostore.pagematrixY]))"; \
              pg=0; while [ ${pg} -lt ${PAGEMATRIX} ]; do pg=$((pg + 1)); \
              pagenum=$(egrep "^PG:${pg}:.*:" $[infostore.wsmconf] | \
              cut -d: -f3 | sed "s/\\(.\\)\\(.\\)/\\1 \\2/g"); \
              pagename=$(egrep "^PG:${pg}:.*:" $[infostore.wsmconf] | cut -d: -f4); \
              if [ "x${pagename}" = "x" ]; then pagename="$pg"; fi; \
              echo "+ \\\"&${pg} $pagename\\\" f_DeiconifyOnPage $pagenum"; done'

DestroyFunc f_WindowOps
AddToFunc f_WindowOps
+ I AddToMenu $0 "&Refresh		$[infostore.km_xrefresh]" f_RegenerateWindow
+ I AddToMenu $0 "&Move		$[infostore.km_move]" Move
+ I AddToMenu $0 "&Size		$[infostore.km_resize]" Resize
+ I AddToMenu $0 "&Lower		$[infostore.km_raiselower]" Lower
+ I AddToMenu $0 "R&aise		$[infostore.km_raiselower]" Raise
+ I AddToMenu $0 "(De)&Iconify		$[infostore.km_iconify]" Iconify
+ I AddToMenu $0 "(De)S&hade		$[infostore.km_windowshade]" WindowShade
+ I AddToMenu $0 "(Un)Ma&ximize		$[infostore.km_max_100]" Maximize
+ I AddToMenu $0 "(Un)Stre&tch		$[infostore.km_max_82]" Piperead "echo Maximize 100 $(($[vp.height] - 82))p"
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "&Occupy Workspace...		$[infostore.km_occupyworkspace]" f_SendToOccupy
+ I AddToMenu $0 "Occupy &All Workspaces		$[infostore.km_sticktoggle]" Stick True
+ I AddToMenu $0 "&Unoccupy Workspaces		$[infostore.km_sticktoggle]" Stick False
+ I AddToMenu $0 "" Nop

DestroyFunc f_WindowOpsFP
AddToFunc f_WindowOpsFP
+ I AddToMenu $0 "&Refresh		$[infostore.km_xrefresh]" f_RegenerateWindow
+ I AddToMenu $0 "&Move		$[infostore.km_move]" Move
+ I AddToMenu $0 "&Size		$[infostore.km_resize]" Resize
+ I AddToMenu $0 "&Lower		$[infostore.km_raiselower]" Lower
+ I AddToMenu $0 "R&aise		$[infostore.km_raiselower]" Raise
+ I AddToMenu $0 "(De)&Iconify		$[infostore.km_iconify]" Iconify
+ I AddToMenu $0 "(De)S&hade		$[infostore.km_raiseshadefp]" f_RaiseShadeFrontPanel
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "&Occupy Workspace...		$[infostore.km_occupyworkspace]" f_SendToOccupy
+ I AddToMenu $0 "Occupy &All Workspaces		$[infostore.km_sticktoggle]" Stick True
+ I AddToMenu $0 "&Unoccupy Workspaces		$[infostore.km_sticktoggle]" Stick False
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "&Close Front Panel		$[infostore.km_delete]" Current f_WindowOpsFPHelper $[w.id]
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "Reposition &Window		$[infostore.km_raisefp]" f_RaiseFrontPanel

DestroyFunc f_WindowOpsFPHelper
AddToFunc f_WindowOpsFPHelper
+ I KillModule FvwmButtons FrontPanel
+ I Deschedule $0
+ I Schedule 100 Deschedule $0
+ I Schedule 200 Deschedule $0

DestroyFunc f_WindowOpsMore
AddToFunc f_WindowOpsMore
+ I AddToMenu $0 "Page ..." Popup m_MoveToPage
+ I AddToMenu $0 "Workspace ..." Popup m_MoveToWorkspace
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "Title Bar On/Off		$[infostore.km_toggletitle]" Pick (CirculateHit) f_ToggleTitle
+ I AddToMenu $0 "Center Window			$[infostore.km_centerwindow]" Pick (CirculateHit) f_CenterWindow
+ I AddToMenu $0 "Stays on Layer Top" Pick (CirculateHit) Layer 0 6
+ I AddToMenu $0 "Stays on Layer Bottom" Pick (CirculateHit) Layer 0 2
+ I AddToMenu $0 "Stays on Layer Put" Pick (CirculateHit) Layer 0 4
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "Identify" Module FvwmIdent

DestroyFunc f_WindowOpsBottom
AddToFunc f_WindowOpsBottom
+ I AddToMenu $0 "" Nop
+ I AddToMenu $0 "&Delete		$[infostore.km_delete]" Delete
+ I AddToMenu $0 "&Close		$[infostore.km_close]" Close
+ I AddToMenu $0 "Destroy		$[infostore.km_destroy]" Destroy

DestroyFunc f_SubpanelSettings
AddToFunc f_SubpanelSettings
+ I AddToMenu $0 "Subpanel Settings" Current Module FvwmScript SubpanelSettings $[w.name]

# Fill Applications Menu:
# If there is APPMENU env set, use this as the desktop menu
# If not, check for XDG_CURRENT_DESKTOP, lowercase and use that
# If not, do not use "--desktop" while generating menus, but any
# xyz-applications.menu found in /etc/xdg/menus.
DestroyFunc f_ApplicationsMenu
AddToFunc f_ApplicationsMenu
+ I Test (EnvIsSet APPMENU) \
    PipeRead "${NSCDE_ROOT}/libexec/nscde-fvwm-menu-desktop -e --enable-mini-icons \
    --insert-in-menu m_Applications --include-items none \
    --app-icon ${NSCDE_ROOT}/share/icons/NsCDE/Nominiicon.xpm --menu-type applications \
    --desktop $APPMENU --mini-icon-dir ${FVWM_USERDIR}/icons"
+ I TestRc (Match) Break
+ I Test (EnvIsSet XDG_CURRENT_DESKTOP) \
    PipeRead 'echo -ne "SetEnv APPMENU "; echo $XDG_CURRENT_DESKTOP | tr A-Z a-z'
+ I Test (EnvIsSet APPMENU) \
    PipeRead "${NSCDE_ROOT}/libexec/nscde-fvwm-menu-desktop -e --enable-mini-icons \
    --insert-in-menu m_Applications --include-items none \
    --app-icon ${NSCDE_ROOT}/share/icons/NsCDE/Nominiicon.xpm --menu-type applications \
    --desktop $APPMENU --mini-icon-dir ${FVWM_USERDIR}/icons"
+ I TestRc (Match) Break
+ I TestRc (NoMatch) \
    PipeRead "${NSCDE_ROOT}/libexec/nscde-fvwm-menu-desktop -e --enable-mini-icons \
    --insert-in-menu m_Applications --include-items none \
    --app-icon ${NSCDE_ROOT}/share/icons/NsCDE/Nominiicon.xpm --menu-type applications \
    --mini-icon-dir ${FVWM_USERDIR}/icons"

#######################################################
# Placeholders for functions aimed for user to override
#######################################################
# Called from the CheckMailApplet (left from the WSM on Front Panel)
DestroyFunc f_CheckMail
AddToFunc f_CheckMail
+ I None ("Check Mail Function") FvwmForm ErrMsgForm \
    TITLE="Check Mail Function" \
    TEXT="Write your f_CheckMail function in $[FVWM_USERDIR]/NsCDE-Functions.local."

# Called from MonthDayApplet (right of the watch on Front Panel)
DestroyFunc f_Calendar
AddToFunc f_Calendar
+ I None ("Calendar Function") FvwmForm ErrMsgForm \
    TITLE="Calendar Function" \
    TEXT="Write your f_Calendar function in $[FVWM_USERDIR]/NsCDE-Functions.local."

# Currently unused.
DestroyFunc f_Mixer
AddToFunc f_Mixer
+ I Test (x pnmixer x stalonetray) Exec exec pnmixer
+ I TestRc (NoMatch) None ("Audio Mixer Function") FvwmForm ErrMsgForm \
    TITLE="Audio Mixer Function" \
    TEXT="Write your f_Mixer function in $[FVWM_USERDIR]/NsCDE-Functions.local."

# Function place holder for user additions to root menu
DestroyFunc f_AddCustomToRootMenu
AddToFunc f_AddCustomToRootMenu
+ I Nop

# Called from FvwmEvent MainLoop. Here, user can set
# own hooks to be done when current desk changes.
DestroyFunc f_UserChangeDesk
AddToFunc f_UserChangeDesk
+ I Nop

# Called from FvwmEvent MainLoop. Here, user can set
# own hooks to be done when current page changes.
DestroyFunc f_UserChangePage
AddToFunc f_UserChangePage
+ I Nop

# Hook of the f_SysAddWindowEvent called from
# FvwmEvent on add_window event
DestroyFunc f_AddWindowEvent
AddToFunc f_AddWindowEvent
+ I Nop

#####################################
# Functions used in NsCDE FvwmScripts
#####################################

# Function: f_RunQuickScriptDialog
# Center $0 where $0 is a dialog
# Depends on f_AnimatedCenterWarp
# $1 and $2 are coordinates for WarpToWindow used by f_AnimatedCenterWarp
DestroyFunc f_RunQuickScriptDialog
AddToFunc f_RunQuickScriptDialog
+ I None ($0) Module FvwmScript $*
+ I Wait $0
+ I f_AnimatedCenterWarp $0 50 45

# Function: f_DesksMenu
# Genetates menu for List widget of OccupyWorkspace Script
# Depends on: f_SetWSMConf
DestroyFunc f_DesksMenu
AddToFunc f_DesksMenu
+ I f_SetWSMConf
+ I PipeRead 'echo -ne "InfoStoreAdd desksmenu "; echo $(egrep "^WSP:.*:" $[infostore.wsmconf] | sort -t: -nk2 | \
              awk -F: \'{ if ($$$1 == \"WSP\") print \"|\" $$$3 }\' | \
              head -$[infostore.desknum]) | sed "s/^|//g; s/\ //g"'

# Function: f_SendToOccupy
# Calls and sets up OccupyWorkspace Script with fvwm variables
# Depends on: f_RunQuickScriptDialog, f_AnimatedCenterWarp, f_DesksMenu
DestroyFunc f_SendToOccupy
AddToFunc f_SendToOccupy
+ I f_DesksMenu
+ I f_RunQuickScriptDialog OccupyWorkspace
+ I SendToModule OccupyWorkspace SendString 9 1 $[w.id] $[w.name]
+ I SendToModule OccupyWorkspace SendString 1 1 $[desk.n]
+ I SendToModule OccupyWorkspace SendString 1 2 $[infostore.desksmenu]

# Called from OccupyWorkspace
# Function: f_OccupyDesk
# Main task of OccupyWorkspace
DestroyFunc f_OccupyDesk
AddToFunc f_OccupyDesk
+ I WindowId $0 Stick False
+ I WindowId $0 MoveToDesk $1 $2
+ I $3 $1 $2

# Without this, WSM does not change it's pressed/unpressed button state
# if desk is changed by some other means.
# Function f_SendToWSM
# WSM Helper
DestroyFunc f_SendToWSM
AddToFunc f_SendToWSM
+ I SendToModule WSM SendString 40 10 $[desk.n]$[page.nx]$[page.ny]

# Unclick Page Indicator from itself (visual function only)
# Function f_SendToPageIndicator
# PageIndicator Helper
DestroyFunc f_SendToPageIndicator
AddToFunc f_SendToPageIndicator
+ I SendToModule PageIndicator SendString 3 1 $[page.nx]$[page.ny]

# Fplite applet on Front Panel, right top of WSM
# Can be overriden by user if user has some fancy
# app for processes and system resources.
DestroyFunc f_FpLiteClickAction
AddToFunc f_FpLiteClickAction
+ I Test (EnvMatch NSCDE_OS SunOS) Exec exec $[infostore.terminal] -e prstat
+ I TestRc (Match) Break
+ I Test (EnvMatch NSCDE_OS AIX) Exec exec $[infostore.terminal] -e topas
+ I TestRc (Match) Break
+ I Test (x top) Exec exec $[infostore.terminal] -e top
+ I TestRc (Match) Break
+ I None ("FpLite Function Error") FvwmForm ErrMsgForm \
 TITLE="FpLite Function Error" \
 TEXT="Error: Func:f_FpLiteClickAction: Cannot find top(1), prstat(1m) or topas(5) in PATH."

# SysActionDialog
DestroyFunc f_QuitAndExit
AddToFunc f_QuitAndExit
+ I Test (EnvIsSet SESSION_MANAGER) SetEnv QuitCmd SaveQuitSession
+ I Test (!EnvIsSet SESSION_MANAGER) SetEnv QuitCmd Quit
+ I Echo LOG: Quit NsCDE
+ I Exec exec sync
+ I Test (!EnvIsSet SESSION_MANAGER) Deschedule
+ I Test (!EnvIsSet SESSION_MANAGER) All Delete
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 600 All Close
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 800 All Destroy
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 1200 $[QuitCmd]
+ I Test (EnvIsSet SESSION_MANAGER) Schedule 200 $[QuitCmd]

# SysActionDialog
DestroyFunc f_QuitAndShutdown
AddToFunc f_QuitAndShutdown
+ I Test (EnvIsSet SESSION_MANAGER) SetEnv QuitCmd SaveQuitSession
+ I Test (!EnvIsSet SESSION_MANAGER) SetEnv QuitCmd Quit
+ I Echo LOG: Quit NsCDE
+ I Exec exec sync
+ I Test (!EnvIsSet SESSION_MANAGER) Deschedule
+ I Test (!EnvIsSet SESSION_MANAGER) All Delete
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 600 All Close
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 800 All Destroy
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 1200 Exec exec sudo init $0
+ I Test (!EnvIsSet SESSION_MANAGER) Schedule 1600 $[QuitCmd]
+ I Test (EnvIsSet SESSION_MANAGER) Exec exec sudo init $0
+ I Test (EnvIsSet SESSION_MANAGER) Schedule 400 $[QuitCmd]

# Designed as self-helper for Fvwm Scripts
DestroyFunc f_UnclickScript
AddToFunc f_UnclickScript
+ I Schedule $0 SendToModule $1 SendString $2 $3 $4

# Keep part of the keybindings which is common to menus in
# sync with menu declarations of them.
DestroyFunc f_KeyMenu
AddToFunc f_KeyMenu
+ I Piperead "$[NSCDE_ROOT]/libexec/keymenu -a"

